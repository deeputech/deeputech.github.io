<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Technorage</title>
    <description>Where I rage about technology and stuff!</description>
    <link>https://deepu.tech/</link>
    <atom:link href="https://deepu.tech/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 11 Oct 2023 13:09:34 +0200</pubDate>
    <lastBuildDate>Wed, 11 Oct 2023 13:09:34 +0200</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Mastodon for Developers: Everything You Need to Know</title>
        <description>Learn how to use Mastodon effectively as a developer. | &lt;a href=&quot;https://deepu.tech/mastodon-for-devs/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href=&quot;https://auth0.com/blog/mastdon-for-developers/&quot;&gt;auth0.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-mastodon&quot;&gt;What Is Mastodon?&lt;/h2&gt;

&lt;p&gt;Mastodon is an open-source, distributed micro-blogging platform that can host social networking sites. It was created by &lt;a href=&quot;https://en.wikipedia.org/wiki/Eugen_Rochko&quot;&gt;Eugen Rochko&lt;/a&gt; and was first released in 2016. It is similar to Twitter regarding features, target audience, and user experience. But unlike Twitter, it is run on a decentralized network of servers, each of which is called an &lt;strong&gt;instance&lt;/strong&gt;. This does not mean that you have fragmented silos; instances are federated, which means you can talk to other instances, follow people, and see content from other instances, making Mastodon the ideal decentralized social network.&lt;/p&gt;

&lt;p&gt;Any single company does not own the Mastodon network, and users can join any instance they wish. The federation allows people to connect and interact with each other across different instances, making Mastodon more open, secure, and free than something like Twitter. This means no single entity has absolute control over Mastodon, which is a big advantage over traditional social networks like Twitter, which is owned by a single company and is not open source.&lt;/p&gt;

&lt;p&gt;After the recent &lt;a href=&quot;https://twitterisgoinggreat.com&quot;&gt;Twitter saga&lt;/a&gt;, it’s clear why this is a major benefit. However, this does not mean there is no moderation. Quite the contrary, actually. Each instance can have its own rules and can moderate content as they see fit. This means you can join an instance that is more aligned with your values and beliefs or even hosts your own if you have the necessary resources.&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-care-about-mastodon&quot;&gt;Why Should You Care about Mastodon?&lt;/h2&gt;

&lt;p&gt;Platforms like Twitter, Facebook, Instagram, and TikTok make most of their revenue from advertisements. This means they are selling our attention to advertisers.&lt;/p&gt;

&lt;p&gt;How do you keep someones attention? Our brains are naturally wired to seek dopamine reward pathways and &lt;a href=&quot;https://www.iomcworld.org/open-access/neurotransmitter-dopamine-da-and-its-role-in-the-development-of-social-media-addiction-59222.html&quot;&gt;algorithms&lt;/a&gt; used by these social media often target dopamine pathways to create a feeling of reward and reinforcement that encourages people to keep using their services. This is done by providing users with a steady stream of new content and positive feedback, such as likes and comments, which stimulates dopamine production in the brain. This can lead to people becoming addicted to social media, as they constantly seek out the reward of dopamine that comes with using the platform.&lt;/p&gt;

&lt;p&gt;In addition, many platforms use algorithms to personalize content and increase the chance of a positive outcome, further encouraging people to use the service. But that’s not all; these algorithms also use tactics like amplifying content that is reactionary, sensational, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Mean_world_syndrome&quot;&gt;frightening&lt;/a&gt;, which grabs our attention.&lt;/p&gt;

&lt;p&gt;Platforms like Mastodon, which &lt;a href=&quot;https://arstechnica.com/tech-policy/2022/12/twitter-rival-mastodon-rejects-funding-to-preserve-nonprofit-status/&quot;&gt;does not operate for profit&lt;/a&gt;, do not have any incentives to follow similar tactics. This does not mean that it is not possible as a Mastodon instance can choose to serve advertisements. But since you have control as a user, you can choose to join an instance that does not serve advertisements. This means that algorithms are not manipulating you to keep you hooked on the platform. This is a big advantage over platforms like Twitter which are designed to keep you hooked on the platform, making it easier to sow division and hatred by nefarious actors.&lt;/p&gt;

&lt;p&gt;Mastodon is an important platform for anyone who values their freedom, security, mental health, and privacy online. It is a great alternative to Twitter for those who are looking for a more open and secure platform to connect with others without having to worry about being harassed or bullied. It is quite customizable and provides greater control over your data. With its growing user base, Mastodon is quickly becoming the go-to platform for many people looking for a better way to connect with others and get out of the grasp of BigTech.&lt;/p&gt;

&lt;h2 id=&quot;what-is-fediverse-and-how-does-it-work&quot;&gt;What Is Fediverse, and How Does It Work?&lt;/h2&gt;

&lt;p&gt;Fediverse is the term used to describe a network of interconnected servers that can communicate with each other using decentralized networking protocols. Fediverse is bigger than Mastodon and can include, among others:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mastodon servers (social networking and microblogging)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://friendi.ca/&quot;&gt;Friendica&lt;/a&gt; servers (social networking and microblogging)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joinpeertube.org/&quot;&gt;PeerTube&lt;/a&gt; servers (video hosting)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pleroma.social/&quot;&gt;Pleroma&lt;/a&gt; servers (social networking and microblogging)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fediverse networks can be used for social networks, file hosting services, and so on.&lt;/p&gt;

&lt;p&gt;Fediverse works using several different communication protocols. The most important ones are &lt;a href=&quot;https://activitypub.rocks/&quot;&gt;ActivityPub&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/community/ostatus/wiki/Main_Page&quot;&gt;OStatus&lt;/a&gt;, and &lt;a href=&quot;https://diaspora.github.io/diaspora_federation/&quot;&gt;diaspora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ActivityPub is a protocol that allows servers to communicate with each other. It is a decentralized protocol based on the &lt;a href=&quot;https://www.w3.org/TR/activitystreams-core/&quot;&gt;ActivityStreams&lt;/a&gt; standard. Mastodon, PeerTube, and Pleroma use ActivityPub.&lt;/p&gt;

&lt;p&gt;OStatus is a decentralized protocol based on the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4287&quot;&gt;Atom Syndication Format&lt;/a&gt;. OStatus is a predecessor to ActivityPub and is used by older instances of Mastodon and Pleroma.&lt;/p&gt;

&lt;p&gt;Diaspora is a decentralized protocol. Mastodon, Friendica, and Pleroma use it.&lt;/p&gt;

&lt;p&gt;Any server that supports one of these protocols can communicate with other servers that support the same protocol.&lt;/p&gt;

&lt;p&gt;It is difficult to estimate the number of users in Fediverse due to the distributed nature, but &lt;a href=&quot;https://fediverse.observer/stats&quot;&gt;rough third-party estimates&lt;/a&gt; put it at around 8 million users. This is a small fraction of the number of users on Twitter, but it is growing rapidly, as well as the number of instances.&lt;/p&gt;

&lt;h2 id=&quot;choosing-servers&quot;&gt;Choosing Servers&lt;/h2&gt;

&lt;p&gt;One of the biggest strengths of Mastodon, decentralization, is also its biggest hurdle when it comes to adoption. This means that there is no single place to sign up for Mastodon. Instead, you have to choose an instance to join. Choosing a server could be a daunting task, especially if you are new to Mastodon. There are some factors to consider when choosing a server. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quality and reliability of the server&lt;/li&gt;
  &lt;li&gt;Community and moderation&lt;/li&gt;
  &lt;li&gt;Rules and Policies&lt;/li&gt;
  &lt;li&gt;Non-profit status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choosing a server based on this is important, but it’s not as critical as it seems. This is because you can follow people from other servers and see their content in your timeline. This means you can join a server that is more aligned with your values and beliefs and still follow people from other servers. This is one of the biggest advantages of Mastodon over Twitter, where you are forced to follow people from the same server. Not just that, Mastodon lets you move from one server to another in case you choose a server that turns out to be unreliable, or you realize that you disagree with the server’s policies. You can also easily import your data, like your followers and people you follow, to the new server. So choose a server you feel comfortable with and stick around to see how it goes. You can always move to another server if you don’t like it.&lt;/p&gt;

&lt;p&gt;As of this writing, there are over 17,000 instances of Mastodon, which is growing daily. This means that there is a Mastodon instance for everyone. You can find a list of Mastodon instances on &lt;a href=&quot;https://instances.social/&quot;&gt;instances.social&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;recommended-servers&quot;&gt;Recommended servers&lt;/h3&gt;

&lt;p&gt;For technical folks like developers, you could consider joining one of these servers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fosstodon.org/&quot;&gt;fosstodon.org&lt;/a&gt;: Ideal for developers, especially if you are an open-source enthusiast&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mstdn.social/&quot;&gt;mstdn.social&lt;/a&gt;: It’s a general-purpose server with a good community and is quite reliable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mastodon.social/&quot;&gt;mastodon.social&lt;/a&gt;: The official Mastodon server with a good community and is quite reliable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hachyderm.io/&quot;&gt;hachyderm.io&lt;/a&gt;: A server for tech industry professionals&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techhub.social/&quot;&gt;techhub.social&lt;/a&gt;: A server for technology enthusiasts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-a-timeline-based-on-hashtags-and-follows&quot;&gt;Building a Timeline Based on Hashtags and Follows&lt;/h2&gt;

&lt;p&gt;Unlike Twitter, when you join a Mastodon server, you will not be greeted by a timeline with interesting posts and recommendations for people to follow. Instead, you are going to be greeted by an empty timeline. This is by design, as Mastodon does not have any algorithm or recommendation system, and you will not be following people from the same server. This means that you have to build your timeline by following people and hashtags. This is a good thing as it gives you more control over your timeline, and you will not be bombarded with content you are not interested in. You can find and follow people from other instances by searching for their usernames. For example, if you want to follow me, you can search for my username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@deepu105&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@deepu105@mastodon.social&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can also follow hashtags; look for the &lt;strong&gt;+&lt;/strong&gt; button on the top right corner of the screen when you are on the hashtag page. This works on the web version and some mobile clients.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/2j6yJWRTi4l5ietKeozjqR/374a2ad171c40d316bf9f0dfb5d7a92e/follow-hasgtags.png&quot; alt=&quot;Follow hashtags&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to follow people and hashtags you are interested in to have interesting content on your timeline. You can mute people you are not interested in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/6TfN7bNDr2wW1gUZAj88tN/ca7e15a4aa52899a3c4b183f6fb9925a/mute-accounts.png&quot; alt=&quot;Mute accounts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also filter hashtags or words you don’t want to see on your timeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/2k95DqMi5dliPOdPLdmLxm/cbd8ca9268379c89bd4207b581e3df2f/mute-hashtag.png&quot; alt=&quot;Filter hashtags&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a great way to keep your timeline clean and free of unwanted content.&lt;/p&gt;

&lt;p&gt;If you are migrating from Twitter, &lt;a href=&quot;https://www.movetodon.org/&quot;&gt;Movetodon.org&lt;/a&gt; is a great tool to help you find and follow people from Twitter on Mastodon.&lt;/p&gt;

&lt;h2 id=&quot;cross-posting&quot;&gt;Cross-Posting&lt;/h2&gt;

&lt;p&gt;If you prefer to keep your Twitter account and cross-post to Mastodon and vice versa, you can use some tools to do so, including writing your own scripts using Twitter and Mastodon APIs. My personal favorite is &lt;a href=&quot;https://moa.party/&quot;&gt;moa.party&lt;/a&gt;. It supports cross-posting to and from Twitter and Mastodon and is simple to setup and use. It can also post from Instagram to Mastodon. It is &lt;a href=&quot;https://gitlab.com/fedstoa/moa&quot;&gt;open-source&lt;/a&gt;, and you can host it yourself if you don’t want to give the service access to your Twitter/Mastodon accounts &lt;a href=&quot;https://moaparty.com/oauth/&quot;&gt;using OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;securing-the-account&quot;&gt;Securing the Account&lt;/h2&gt;

&lt;p&gt;As usual, it is important to keep your Mastodon account secure. This includes using a strong password, using a password manager, and enabling two-factor authentication (2FA). Mastodon supports 2FA using TOTP (Time-based One-time Password Algorithm) authenticator apps like Google Authenticator and FIDO security keys like Yubikey.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/3u8URYtpAdDxDHXiNb5Tvb/2df7bd5aa4975e281054d3853cab566a/2fa.png&quot; alt=&quot;Adding 2FA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also verify your Mastodon account by linking your official website, GitHub profile, and so on. This is a great way to prove that you are the owner of the account and prevent impersonation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/CP3tOMcsMX7V90jGrYXJO/2641210af2340acd254c4d1fdd08e9b0/verify.png&quot; alt=&quot;Verify your Mastodon account&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To do this, go to &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Appearance&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Profile metadata&lt;/strong&gt; and copy the verification URL and add it to your website as instructed. For the GitHub profile, add your Mastodon profile URL in the GitHub profile’s website field. For example, my Mastodon profile URL is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mastodon.social/@deepu105&lt;/code&gt;. Now add your website or GitHub profile URL to your Mastodon profile metadata and save.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/45ZMJHHZsTkADIWI4yOlbf/0a50498ca9ca17e43c358bba1ecdd1fa/verify-result.png&quot; alt=&quot;Verified links on Mastodon account&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;moving-between-servers&quot;&gt;Moving between Servers&lt;/h2&gt;

&lt;p&gt;If you decide to move from one Mastodon server to another, here are a few tips to make the process smooth.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, create a profile on the new server you want to use. Note that this will be a new username, as Mastodon usernames include the server name, and you need to choose a username that is available on the new server.&lt;/li&gt;
  &lt;li&gt;Export your data from the old server by going to &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Import and export&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Data export&lt;/strong&gt;. You will get CSV files for each item you export, like Follows, mutes, and so on.&lt;/li&gt;
  &lt;li&gt;Create an account alias in your new account by going to &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Account&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Account settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Moving from a different account&lt;/strong&gt;. This will allow you to redirect your old account and move followers from your old account to the new account.&lt;/li&gt;
  &lt;li&gt;Now, from your old account, redirect to the new account by going to &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Account&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Account settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Moving to a different account&lt;/strong&gt;. This will redirect your old account to the new account, and all your followers will be moved to the new account.&lt;/li&gt;
  &lt;li&gt;Now, from your new account, go to &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Import and export&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Import&lt;/strong&gt; and import the CSV files that you exported from your old account. This will import all your follows, mutes, lists, and so on to the new account.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Mastodon is a great alternative to Twitter and is a great way to connect with people from around the world without worrying about a single entity dictating what you can and cannot do with your social media. It is a great way to build a community around your projects and share your thoughts and ideas. It is also a great way to connect with people from the open-source community. I hope this guide will help you get started with Mastodon.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://mastodon.social/@deepu105&quot;&gt;Mastodon&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</content:encoded>
        <media:content url="https://images.ctfassets.net/23aumh6u8s0i/48DMcrjsrTyczgB2Im8ii7/8b8e3050f1c04e797181500c44da05ee/mastodon-color.png" medium="image">https://images.ctfassets.net/23aumh6u8s0i/48DMcrjsrTyczgB2Im8ii7/8b8e3050f1c04e797181500c44da05ee/mastodon-color.png</media:content>
        <pubDate>Mon, 06 Feb 2023 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/mastodon-for-devs/</link>
        <guid isPermaLink="true">https://deepu.tech/mastodon-for-devs/</guid>
        
        <category>social</category>
        
        <category>mastodon</category>
        
        
      </item>
    
      <item>
        <title>Shhhh... Kubernetes Secrets Are Not Really Secret!</title>
        <description>Learn how to setup secure secrets on Kubernetes using Sealed Secrets, External Secrets Operator, and Secrets Store CSI driver. | &lt;a href=&quot;https://deepu.tech/kubernetes-secrets-management/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href=&quot;https://auth0.com/blog/kubernetes-secrets-management/&quot;&gt;auth0.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes has become an inevitable part of the modern software infrastructure. Hence managing sensitive data on Kubernetes is also an essential aspect of modern software engineering so that you can put the security back into DevSecOps. Kubernetes offers a way to store sensitive data using the &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;Secret&lt;/a&gt; object. While it’s better than nothing, it is not really a secret, as it is just &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;base64&lt;/a&gt; encoded strings that anyone with access to the cluster or the code can decode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt;
Kubernetes Secrets are, by default, stored unencrypted in the API server’s underlying data store (etcd). Anyone with API access can retrieve or modify a Secret, and so can anyone with access to etcd. Additionally, anyone authorized to create a Pod in a namespace can use that access to read any Secret in that namespace; this includes indirect access, such as the ability to create a Deployment.
— &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;Kubernetes docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem of reading secrets from the cluster can be fixed using proper &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&quot;&gt;RBAC&lt;/a&gt; configuration and by securing the API server, check out &lt;a href=&quot;https://developer.okta.com/blog/2021/12/02/k8s-security-best-practices&quot;&gt;How to Secure Your Kubernetes Clusters With Best Practices&lt;/a&gt; to learn more about RBAC and cluster API security. Securing secrets on the source code is the bigger problem. Everyone who has access to the repositories containing those secret definitions can also decode them. This makes it quite tricky to manage Kubernetes secrets in Git, like every other resource.&lt;/p&gt;

&lt;p&gt;Let’s see how to setup more secure secrets using the;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sealed Secrets,&lt;/li&gt;
  &lt;li&gt;External Secrets Operator,&lt;/li&gt;
  &lt;li&gt;Secrets Store CSI driver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You would need a Kubernetes cluster to run the samples. I used &lt;a href=&quot;https://k3d.io/&quot;&gt;k3d&lt;/a&gt; to create a local cluster. You can also use &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;kind&lt;/a&gt; or &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/&quot;&gt;minikube&lt;/a&gt; for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;sealed-secrets&quot;&gt;Sealed Secrets&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bitnami-labs/sealed-secrets&quot;&gt;Sealed Secrets&lt;/a&gt; is an open-source Kubernetes controller and a client-side CLI tool from Bitnami that aims to solve the “&lt;strong&gt;storing secrets in Git&lt;/strong&gt;” part of the problem, using asymmetric crypto encryption. Sealed Secrets with an RBAC configuration preventing non-admins from reading secrets is an excellent solution for the entire problem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/5Ku8H6vSbhV1rECmEYV3q7/07b8d6a66aabff4534d84095d0d1687a/sealed-secrets-architecture.jpg&quot; alt=&quot;Sealed Secrets Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It works as below;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Encrypt the secret on the developer machine using a public key and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeseal&lt;/code&gt; CLI. This encodes the encrypted secret into a Kubernetes Custom Resource Definition (CRD)&lt;/li&gt;
  &lt;li&gt;Deploy the CRD to the target cluster&lt;/li&gt;
  &lt;li&gt;The Sealed Secret controller decrypts the secret using a private key on the target cluster to produce a standard Kubernetes secret.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The private key is only available to the Sealed Secrets controller on the cluster, and the public key is available to the developers. This way, &lt;strong&gt;only the cluster can decrypt the secrets, and the developers can only encrypt them&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Supports template definition so that metadata can be added to the unsealed secrets. For example, you can add labels and annotations to the unsealed secrets using the template definition.&lt;/li&gt;
  &lt;li&gt;The unsealed secrets will be owned by the sealed secret CRD and updated when the sealed secrets are updated.&lt;/li&gt;
  &lt;li&gt;Certificates are rotated every 30 days by default, and this can be customized.&lt;/li&gt;
  &lt;li&gt;Secrets are encrypted using unique keys for each cluster, namespace, and secret combination (private key + namespace name + secret name), preventing any loopholes in decryption. This behavior is configurable using scopes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strict&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace-wide&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster-wide&lt;/code&gt; during the sealing process.&lt;/li&gt;
  &lt;li&gt;Can be used to manage existing secrets in the cluster.&lt;/li&gt;
  &lt;li&gt;Has a &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=codecontemplator.kubeseal&quot;&gt;VSCode extension&lt;/a&gt; to make it easier to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Since it unseals the sealed secrets into regular secrets, you can still decode them if you have access to the cluster and namespace.&lt;/li&gt;
  &lt;li&gt;Requires resealing for each cluster environment, as the key pair will be unique for each cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Install the controller on the cluster and the CLI on the local machine.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller.yaml&lt;/code&gt; manifest file from the &lt;a href=&quot;https://github.com/bitnami-labs/sealed-secrets/releases&quot;&gt;release&lt;/a&gt; page.&lt;/li&gt;
  &lt;li&gt;Deploy the controller using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl apply -f controller.yaml&lt;/code&gt; to your cluster. The controller will be installed on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-system&lt;/code&gt; namespace. The controller will start and be ready in a few moments.&lt;/li&gt;
  &lt;li&gt;Install the CLI on your local machine using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install kubeseal&lt;/code&gt; (Linux &amp;amp; macOS) or using the pre-built binaries on the &lt;a href=&quot;https://github.com/bitnami-labs/sealed-secrets/releases&quot;&gt;release&lt;/a&gt; page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Let’s create a sealed secret.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a secret using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl create secret&lt;/code&gt; command or by hand coding a YAML file as follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; secretvalue | kubectl create secret generic mysecret &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--dry-run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;client &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--from-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/stdin &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; yaml &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my-secret.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will produce a secret definition like the one below;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# my-secret.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;c2VjcmV0dmFsdWU=&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Secret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Seal the secret using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeseal&lt;/code&gt; CLI. This will encrypt the secret using the public key fetched from the server and produce a sealed secret definition. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-secret.yaml&lt;/code&gt; file can be discarded now. You can also download the public key and use it locally in offline mode.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubeseal &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; yaml &amp;lt; my-secret.yaml &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my-sealed-secret.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will produce a sealed secret definition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-sealed-secret.yaml&lt;/code&gt;, like the one below;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# my-sealed-secret.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bitnami.com/v1alpha1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SealedSecret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;encryptedData&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AgA6a4AGzd7qzR8mTPqTPFNor8tTtT5...==&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;null&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file is safe to commit to Git or to share with other developers.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finally, you can deploy this to the cluster to be unsealed.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; my-sealed-secret.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Now, you can see the unsealed secret in the cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl describe secret mysecret
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can use this secret in deployments like any other Kubernetes secret.&lt;/p&gt;

&lt;h2 id=&quot;external-secrets-operator&quot;&gt;External Secrets Operator&lt;/h2&gt;

&lt;p&gt;Sealed Secrets are a great starting point for securing secrets, but there is an even better way. Using the &lt;a href=&quot;https://external-secrets.io/&quot;&gt;External Secrets Operator (ESO)&lt;/a&gt; and an external secret management system like &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/secrets-manager/&quot;&gt;AWS Secrets Manager&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/secret-manager&quot;&gt;Google Secrets Manager&lt;/a&gt;, or &lt;a href=&quot;https://azure.microsoft.com/en-us/services/key-vault/&quot;&gt;Azure Key Vault&lt;/a&gt;. While this is a bit more involved to set up, it is a better approach if you use a cloud provider to host your Kubernetes cluster. ESO supports many such secret managers and watches for changes to external secret stores, and keeps Kubernetes secrets in sync.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/3zlSSXIMQQq0lhw19cY5Me/42782ce30606ff156b49e6879de3b589/external-secrets-operator-architecture.jpg&quot; alt=&quot;External Secrets Operator Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ESO provides four CRDs to manage secrets. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClusterExternalSecret&lt;/code&gt; CRD define what data needs to be fetched and how it should be transformed. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretStore&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClusterSecretStore&lt;/code&gt; CRD define the connection details to the external secret stores. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; variations can be used cluster-wide.&lt;/p&gt;

&lt;p&gt;It works as below;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretStore&lt;/code&gt; CRD to define the connection details to the external secret store.&lt;/li&gt;
  &lt;li&gt;Create secrets in the external secret store.&lt;/li&gt;
  &lt;li&gt;Create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; CRD to define what data needs to be fetched from the external secret store.&lt;/li&gt;
  &lt;li&gt;Deploy the CRDs to the target cluster.&lt;/li&gt;
  &lt;li&gt;The ESO controller will fetch the data from the external secret store and create a Kubernetes secret.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;advantages-1&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Secrets are stored in a secure external secret manager, not the code repository.&lt;/li&gt;
  &lt;li&gt;Keeps secrets in sync with the external secret manager.&lt;/li&gt;
  &lt;li&gt;Works with many external secret managers.&lt;/li&gt;
  &lt;li&gt;Can use multiple secret stores in the same cluster.&lt;/li&gt;
  &lt;li&gt;Provides &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; metrics for monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disadvantages-1&quot;&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Needs an elaborate setup to use.&lt;/li&gt;
  &lt;li&gt;Creates a Kubernetes secret object which can be decoded if you have access to the cluster and namespace.&lt;/li&gt;
  &lt;li&gt;Relies on the external secret manager and its access policies to be secure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;ESO can be installed via &lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt; using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;helm repo add external-secrets https://charts.external-secrets.io

helm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;external-secrets &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  external-secrets/external-secrets &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; external-secrets &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--create-namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to include ESO in your Helm releases, add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--set installCRDs=true&lt;/code&gt; flag to the above command.&lt;/p&gt;

&lt;p&gt;Let’s see how you can use ESO with different secret managers.&lt;/p&gt;

&lt;h3 id=&quot;using-hashicorp-vault&quot;&gt;Using HashiCorp Vault&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt; is a popular secret manager providing different secret engines. ESO can only be used with the &lt;a href=&quot;https://www.vaultproject.io/docs/secrets/kv&quot;&gt;KV Secrets Engine&lt;/a&gt; offered by Vault. Vault provides a free and open-source version that you can self-manage and a managed version with a free tier on the HashiCorp Cloud Platform (HCP).&lt;/p&gt;

&lt;p&gt;Make sure you have a Key-value secret store setup in &lt;a href=&quot;https://developer.hashicorp.com/vault/tutorials/getting-started&quot;&gt;your local Vault instance&lt;/a&gt; or on the &lt;a href=&quot;https://developer.hashicorp.com/vault/tutorials/cloud&quot;&gt;HCP cloud&lt;/a&gt;. You can also &lt;a href=&quot;https://blog.container-solutions.com/tutorialexternal-secrets-with-hashicorp-vault&quot;&gt;deploy Vault to your Kubernetes cluster&lt;/a&gt; using the &lt;a href=&quot;https://www.vaultproject.io/docs/platform/k8s/helm&quot;&gt;Vault Helm chart&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretStore&lt;/code&gt; CRD, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vault-backend.yaml&lt;/code&gt;, to define the connection details to Vault.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# vault-backend.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external-secrets.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SecretStore&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vault-backend&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vault&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YOUR_VAULT_ADDRESS&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v2&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;admin&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# required for HCP Vault&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# points to a secret that contains a vault token&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# https://www.vaultproject.io/docs/auth/token&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tokenSecretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;vault-token&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;token&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create a secret resource to hold the Vault token. Use a token that has &lt;a href=&quot;https://www.vaultproject.io/docs/concepts/policies&quot;&gt;policies&lt;/a&gt; with read access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret/&lt;/code&gt; path in the Vault KV store.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl create secret generic vault-token &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--dry-run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;client &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--from-literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_VAULT_TOKEN
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create a secret in Vault. If you are using the Vault CLI, you can use the below command to create a secret. Make sure you are logged in to the vault instance from the CLI with appropriate policies.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;vault kv put secret/mysecret my-value&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;supersecret
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; CRD to define what data needs to be fetched from Vault.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# vault-secret.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external-secrets.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ExternalSecret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vault-example&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;refreshInterval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;15s&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secretStoreRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vault-backend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SecretStore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vault-example-sync&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secret-from-vault&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;remoteRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secret/mysecret&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-value&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Apply the above CRDs to the cluster, and it should create a Kubernetes secret named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vault-example-sync&lt;/code&gt; with the data fetched from Vault.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; vault-backend.yaml
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; vault-secret.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see the secret in the cluster using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl describe secret vault-example-sync

&lt;span class=&quot;c&quot;&gt;# output should have the below data&lt;/span&gt;
Name:         vault-example-sync
Namespace:    default
Labels:       &amp;lt;none&amp;gt;
Annotations:  reconcile.external-secrets.io/data-hash: ...

Type:  Opaque

Data
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt;
secret-from-vault:  16 bytes
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;If you have issues creating the secret&lt;/strong&gt;, check the events section of the describe output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; resource.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl describe externalsecret vault-example
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see permission errors, make sure you use tokens with the right policies.&lt;/p&gt;

&lt;h3 id=&quot;other-secret-managers&quot;&gt;Other secret managers&lt;/h3&gt;

&lt;p&gt;Setting up other secret managers is similar to the above steps. The only difference would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretStore&lt;/code&gt; CRD and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remoteRef&lt;/code&gt; section in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; CRD. You can find official guides for different providers in the &lt;a href=&quot;https://external-secrets.io/&quot;&gt;ESO documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;secrets-store-csi-driver&quot;&gt;Secrets Store CSI Driver&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://secrets-store-csi-driver.sigs.k8s.io/&quot;&gt;Secrets Store CSI Driver&lt;/a&gt; is a native upstream Kubernetes driver that can be used to abstract where the secret is stored from the workload. If you want to use a cloud provider’s secret manager without exposing the secrets as Kubernetes Secret objects, you can use the CSI Driver to mount secrets as volumes in your pods. This is a great option if you use a cloud provider to host your Kubernetes cluster. The driver supports many cloud providers and can be used with different secret managers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.ctfassets.net/23aumh6u8s0i/20smaU4zvY0Wt4WKeYTrXu/bdf68ba47b6b630a0ed162fd12ff5f0f/secret-csi-driver.jpg&quot; alt=&quot;Secrets Store CSI Driver Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Secrets Store CSI Driver is a daemonset that communicates with the secret provider to retrieve secrets specified in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretProviderClass&lt;/code&gt; custom resource.&lt;/p&gt;

&lt;p&gt;It works as below;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretProviderClass&lt;/code&gt; CRD to define the details of the secret to be fetched from the secret provider.&lt;/li&gt;
  &lt;li&gt;Create deployments and reference the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretProviderClass&lt;/code&gt; in the pod’s volume spec.&lt;/li&gt;
  &lt;li&gt;The driver will fetch the secret from the secret provider and mount it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmpfs&lt;/code&gt; volume in the pod during pod startup. This volume will be removed during pod deletion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The driver can also sync changes to secrets. The driver currently supports &lt;a href=&quot;https://github.com/hashicorp/secrets-store-csi-driver-provider-vault&quot;&gt;Vault&lt;/a&gt;, &lt;a href=&quot;https://github.com/aws/secrets-store-csi-driver-provider-aws&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;https://github.com/Azure/secrets-store-csi-driver-provider-azure&quot;&gt;Azure&lt;/a&gt;, and &lt;a href=&quot;https://github.com/GoogleCloudPlatform/secrets-store-csi-driver-provider-gcp&quot;&gt;GCP&lt;/a&gt; providers. Secrets Store CSI Driver can also sync provider secrets as Kubernetes secrets; if required, this behavior needs to be explicitly enabled during installation.&lt;/p&gt;

&lt;h3 id=&quot;advantages-2&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Secrets are stored in a secure external secret manager, not the code repository.&lt;/li&gt;
  &lt;li&gt;Keeps secrets in sync with the external secret manager. It also supports the rotation of secrets.&lt;/li&gt;
  &lt;li&gt;Works with all major external secret managers.&lt;/li&gt;
  &lt;li&gt;Mounts secrets as volumes in the pod so they are not exposed as Kubernetes secrets. It can be configured to create Kubernetes secrets as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disadvantages-2&quot;&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Needs an elaborate setup to use and is more complex than ESO.&lt;/li&gt;
  &lt;li&gt;Uses more resources than ESO as this needs to run in every node.&lt;/li&gt;
  &lt;li&gt;Relies on the external secret store and its access policies to be secure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-google-secret-manager-provider&quot;&gt;Using Google Secret Manager provider&lt;/h3&gt;

&lt;p&gt;Let us see how to configure the driver to use Google Secret Manager (GSM) as the secret provider.&lt;/p&gt;

&lt;p&gt;Make sure you are using a Google Kubernetes Engine (GKE) cluster with the &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity&quot;&gt;Workload Identity&lt;/a&gt; feature enabled. Workload Identity allows workloads in your GKE clusters to impersonate Identity and Access Management (IAM) service accounts to access Google Cloud services. You would also need to enable Kubernetes Engine API, Secret Manager API, and Billing for the project. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; CLI should prompt you to enable these APIs if they are not enabled.&lt;/p&gt;

&lt;p&gt;The below command can be used to create a new cluster with Workload Identity enabled using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; CLI.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your gcp project&amp;gt;
gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project &lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;

gcloud container clusters create hello-hipster &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--workload-pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;.svc.id.goog
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-the-secrets-store-csi-driver&quot;&gt;Install the Secrets Store CSI Driver&lt;/h4&gt;

&lt;p&gt;Secrets Store CSI Driver can be installed on the cluster with Helm using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts

helm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;csi-secrets-store &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    secrets-store-csi-driver/secrets-store-csi-driver &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; kube-system
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the driver and CRDs on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-system&lt;/code&gt; namespace. You also need to install the provider required into the cluster.&lt;/p&gt;

&lt;h4 id=&quot;install-the-gsm-provider&quot;&gt;Install the GSM provider&lt;/h4&gt;

&lt;p&gt;Let us install the GSM provider into the cluster. The provider can be installed using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/GoogleCloudPlatform/secrets-store-csi-driver-provider-gcp/main/deploy/provider-gcp-plugin.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-a-secret&quot;&gt;Create a Secret&lt;/h4&gt;

&lt;p&gt;First, you need to setup a workload identity service account.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Create a service account for workload identity&lt;/span&gt;
gcloud iam service-accounts create gke-workload

&lt;span class=&quot;c&quot;&gt;# Allow &quot;default/mypod&quot; to act as the new service account&lt;/span&gt;
gcloud iam service-accounts add-iam-policy-binding &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt; roles/iam.workloadIdentityUser &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;serviceAccount:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.svc.id.goog[default/mypodserviceaccount]&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gke-workload@&lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;.iam.gserviceaccount.com
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s create a secret that this service account can access.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Create a secret with 1 active version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysupersecret&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; secret.data
gcloud secrets create testsecret &lt;span class=&quot;nt&quot;&gt;--replication-policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;automatic &lt;span class=&quot;nt&quot;&gt;--data-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;secret.data
&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;secret.data

&lt;span class=&quot;c&quot;&gt;# grant the new service account permission to access the secret&lt;/span&gt;
gcloud secrets add-iam-policy-binding testsecret &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;serviceAccount:gke-workload@&lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;.iam.gserviceaccount.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;roles/secretmanager.secretAccessor
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretProviderClass&lt;/code&gt; resource that will be used to fetch the secret from GSM. Remember to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PROJECT_ID&lt;/code&gt; with your GCP project ID.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# secret-provider-class.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secrets-store.csi.x-k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SecretProviderClass&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-secrets&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gcp&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;- resourceName: &quot;projects/$PROJECT_ID/secrets/testsecret/versions/latest&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path: &quot;good1.txt&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;- resourceName: &quot;projects/$PROJECT_ID/secrets/testsecret/versions/latest&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path: &quot;good2.txt&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-a-pod&quot;&gt;Create a Pod&lt;/h4&gt;

&lt;p&gt;Now you can create a pod that will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecretProviderClass&lt;/code&gt; resource to fetch the secret from GSM. Remember to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PROJECT_ID&lt;/code&gt; with your GCP project ID.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# my-pod.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mypodserviceaccount&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;iam.gke.io/gcp-service-account&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gke-workload@$PROJECT_ID.iam.gserviceaccount.com&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mypod&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mypodserviceaccount&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gcr.io/google.com/cloudsdktool/cloud-sdk:slim&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mypod&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;100m&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;stdinOnce&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;terminationMessagePath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/dev/termination-log&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;terminationMessagePolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/secrets&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysecret&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;csi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secrets-store.csi.k8s.io&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeAttributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secretProviderClass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app-secrets&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply the above resources to the cluster.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; secret-provider-class.yaml
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; my-pod.yaml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait for the pod to start, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt; into the pod and check the contents of the mounted files.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; mypod /bin/bash
&lt;span class=&quot;c&quot;&gt;# execute the below command in the pod to see the contents of the mounted secret file&lt;/span&gt;
root@mypod:/# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /var/secrets/good1.txt
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-secret-managers-1&quot;&gt;Other secret managers&lt;/h3&gt;

&lt;p&gt;You can find similar guides for the &lt;a href=&quot;https://github.com/aws/secrets-store-csi-driver-provider-aws&quot;&gt;AWS CSI provider&lt;/a&gt;, &lt;a href=&quot;https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/getting-started/usage/&quot;&gt;Azure CSI provider&lt;/a&gt; and &lt;a href=&quot;https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-secret-store-driver&quot;&gt;Vault CSI provider&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Sealed Secrets are a great solution for small teams and projects to secure secrets in Git. For larger teams and projects, the External Secrets Operator or the Secrets Store CSI Driver is a better solution to manage secrets securely. The External Secrets Operator can be used with many secret management systems and is not limited to the ones mentioned above. Of course, this should be used with RBAC to prevent non-admins from reading secrets in the cluster. The Secrets Store CSI Driver might be more involved than ESO, but it is a more native solution.&lt;/p&gt;

&lt;p&gt;Cover image created using &lt;a href=&quot;https://midjourney.gitbook.io/&quot;&gt;Midjourney&lt;/a&gt; under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;CC BY-NC 4.0&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://mastodon.social/@deepu105&quot;&gt;Mastodon&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</content:encoded>
        <media:content url="https://images.ctfassets.net/23aumh6u8s0i/5sGRuNiW4fSPVSoZjbwkK0/f505f0bdf239fd84fc6b4d128a48d4ed/Deepu_a_container_ship_entering_a_door_lock_lens_flare_photorea_66931d74-fd55-456a-93e0-48e0ad9e927b.png" medium="image">https://images.ctfassets.net/23aumh6u8s0i/5sGRuNiW4fSPVSoZjbwkK0/f505f0bdf239fd84fc6b4d128a48d4ed/Deepu_a_container_ship_entering_a_door_lock_lens_flare_photorea_66931d74-fd55-456a-93e0-48e0ad9e927b.png</media:content>
        <pubDate>Thu, 15 Dec 2022 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/kubernetes-secrets-management/</link>
        <guid isPermaLink="true">https://deepu.tech/kubernetes-secrets-management/</guid>
        
        <category>devops</category>
        
        <category>kubernetes</category>
        
        <category>devsecops</category>
        
        
      </item>
    
      <item>
        <title>Rust Easy! Modern Cross-platform Command Line Tools to Supercharge Your Terminal</title>
        <description>Rust tooling is taking over the terminal. Use these awesome tools to supercharge your Linux/macOS/Windows terminal. | &lt;a href=&quot;https://deepu.tech/rust-terminal-tools-linux-mac-windows-fish-zsh/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;Rust is taking over the terminal. Rust is a general-purpose programming language that is blazing fast and memory safe. It is the fastest-growing and most loved programming language in the world. It is used to build everything from operating systems to web servers to command-line tools. Recently there has been a surge of command line tools and utilities written in Rust, and many of them are intended to replace standard Unix commands. They are faster, more user-friendly, and have more features than their standard Unix counterparts. In this post, I will cover some of the best Rust command line tools I have used for a while. You can also use these to supercharge your terminal.&lt;/p&gt;

&lt;p&gt;These tools are available for both Linux and macOS. I have not tested them on Windows, but most should also work on Windows. I recommend aliasing the commands to replace the standard commands based on your preferences. If you have &lt;a href=&quot;https://doc.rust-lang.org/cargo/&quot;&gt;Cargo&lt;/a&gt;, the rust package manager, you can install all these using Cargo.&lt;/p&gt;

&lt;h2 id=&quot;alacritty&quot;&gt;Alacritty&lt;/h2&gt;

&lt;p&gt;Let us start with the terminal itself. &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt; is a cross-platform modern terminal emulator with sensible defaults. It is &lt;strong&gt;GPU accelerated&lt;/strong&gt;, super fast, and highly configurable. You can use it on Linux, macOS, and Windows. It doesn’t have much in terms of a UI, and hence all &lt;a href=&quot;https://github.com/alacritty/alacritty/releases/download/v0.11.0/alacritty.yml&quot;&gt;configurations&lt;/a&gt; are done through YAML files. I don’t use it as my primary terminal as I love &lt;a href=&quot;https://invent.kde.org/utilities/yakuake&quot;&gt;Yakuake&lt;/a&gt; too much for all its cool features. We can get most of those features (tabs, split panes, dropdown mode) using &lt;a href=&quot;&quot;&gt;tmux&lt;/a&gt; and &lt;a href=&quot;https://github.com/noctuid/tdrop&quot;&gt;tdrop&lt;/a&gt; if really needed. I use Alacrity when I need speed and GPU acceleration. There is an excellent tutorial on &lt;a href=&quot;https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/&quot;&gt;using Alacritty with tmux&lt;/a&gt;. You could also use &lt;a href=&quot;https://github.com/zellij-org/zellij&quot;&gt;Zellij&lt;/a&gt;, a modern terminal multiplexer written in Rust, with Alacritty.&lt;/p&gt;

&lt;p&gt;There is also the &lt;a href=&quot;https://www.warp.dev/&quot;&gt;Warp&lt;/a&gt; terminal, but it is not open source. It is a great terminal, but I prefer open source software. Thanks to &lt;a href=&quot;https://dev.to/francisc&quot;&gt;Fran Sancisco&lt;/a&gt; for the suggestion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XPYyJof.png&quot; alt=&quot;Alacritty&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; alacritty
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf copr &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;atim/alacritty
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alacritty
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
add-apt-repository ppa:aslatter/ppa
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alacritty
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cask&lt;/span&gt; alacritty
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop bucket add extras
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alacritty
&lt;span class=&quot;c&quot;&gt;# Cargo on any&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alacritty
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;starship&quot;&gt;Starship&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://starship.rs/&quot;&gt;Starship&lt;/a&gt; is the best terminal prompt I have ever used. Forget &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt; and stuff like that. Starship is fast, highly customizable, and has a great default theme and settings. I didn’t even change most of the default settings, as things were perfect as it is. Starship works on shells like zsh, fish, and bash and can also work alongside other prompts like Oh My Zsh, in case you still want to use Oh My Zsh for other plugins like autosuggestions and so on. Starship works best with a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; as it can show icons and ligatures based on context. I used Oh My Zsh for many years with the &lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;powerlevel10k&lt;/a&gt; theme, but the prompt was a bit slow. Starship is blazing fast with more features and an excellent UX.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bPmhPKH.gif&quot; alt=&quot;starship&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; starship
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;starship
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; https://starship.rs/install.sh | sh
&lt;span class=&quot;c&quot;&gt;# macOS/Linux Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;starship
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;starship
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;starship
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;starship &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bat&quot;&gt;bat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; is one of my favorite tools from this list. It’s a replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;, and once you have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt;, you will never go back. It provides features like syntax highlight, line numbers, Git change highlight, shows special chars, paging, and so on. It is super fast and looks beautiful. I have aliased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; immediately after trying it for the first time. By default, bat behaves similarly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;less&lt;/code&gt; by paging large output, but that can be disabled to make it work precisely like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;. It can be used as a drop-in replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; even in scripts. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; can also be used as a previewer for &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. It can also be combined with many other commands and tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;, among others, to add syntax highlighting to outputs. Syntax highlighting themes are configurable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/46r4uom.png&quot; alt=&quot;bat&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-2&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; bat
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat
&lt;span class=&quot;c&quot;&gt;# macOS/Linux Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bat &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lsd-and-exa&quot;&gt;LSD and exa&lt;/h2&gt;

&lt;p&gt;Both &lt;a href=&quot;https://github.com/Peltoche/lsd&quot;&gt;LSD&lt;/a&gt; and &lt;a href=&quot;https://github.com/ogham/exa&quot;&gt;exa&lt;/a&gt; are replacements for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command. They both look gorgeous with nice colors and icons and have features like headers, sorting, tree views, and so on. Exa is a bit faster than LSD for tree views and can show the Git status of files and folders. I prefer exa due to the Git support and faster tree views. I have set up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; alias to use exa by default. Both can be configured to show custom columns and sorting behaviors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KsMv5xG.png&quot; alt=&quot;lsd-exa&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exa-installation&quot;&gt;exa Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; exa
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exa
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exa
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exa
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exa

&lt;span class=&quot;c&quot;&gt;# Alias ls to exa&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;exa --git --icons --color=always --group-directories-first&apos;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lsd-installation&quot;&gt;LSD Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; lsd
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lsd
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lsd_0.23.1_amd64.deb &lt;span class=&quot;c&quot;&gt;# get .deb file from https://github.com/Peltoche/lsd/releases&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lsd
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lsd
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lsd
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lsd

&lt;span class=&quot;c&quot;&gt;# Alias ls to lsd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;lsd --header --color=always --group-directories-first&apos;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rip&quot;&gt;rip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nivekuil/rip&quot;&gt;rip&lt;/a&gt; is an improved version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt; command. It is faster, safer, and user-friendly. rip sends deleted files to a temp location so they can be recovered using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rip -u&lt;/code&gt;. I really like the simplicity and the revert feature, as I don’t have to worry about accidentally deleting something using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;. While rip can be aliased to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;, the creators advise not doing that as you might get used to it and do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt; on other systems where you cannot revert the delete.&lt;/p&gt;

&lt;h3 id=&quot;installation-3&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; rm-improved
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS/Debian/Ubuntu&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install from binary or build locally using Cargo&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rm-improved
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rm-improved
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcp&quot;&gt;xcp&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tarka/xcp&quot;&gt;xcp&lt;/a&gt; is a partial clone of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt; command. It is faster and more user-friendly with progress bars, parallel copying, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; support, and so on. I like its simplicity and developer experience, especially the progress bars. I have aliased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcp&lt;/code&gt; so I can use it everywhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NOnkDyx.png&quot; alt=&quot;xcp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-4&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; xcp
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS/Debian/Ubuntu/macOS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install from binary or build locally using Cargo&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xcp

&lt;span class=&quot;c&quot;&gt;# Alias cp to xcp&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xcp&apos;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;zoxide&quot;&gt;zoxide&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ajeetdsouza/zoxide&quot;&gt;zoxide&lt;/a&gt; is a smarter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; replacement. It remembers the directories you visit, and you can jump to them without providing a full path. You can provide partial paths or even a word from the path. When there are similar paths, zoxide offers an interactive selection using &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. It is super fast and works with all major shells. I like how it works, and I have aliased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; so I can use it everywhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/OTZS3yu.png&quot; alt=&quot;zoxide&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-5&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; zoxide
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide
&lt;span class=&quot;c&quot;&gt;# macOS/Linux Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zoxide &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once installed, you must add the following to your shell config file. For other shells, refer the &lt;a href=&quot;https://github.com/ajeetdsouza/zoxide#step-2-add-zoxide-to-your-shell&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# bash (~/.bashrc)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;zoxide init bash&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# zsh (~/.zshrc)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;zoxide init zsh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# fish (~/.config/fish/config.fish)&lt;/span&gt;
zoxide init fish | &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Alias cd to z&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;z&apos;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dust&quot;&gt;dust&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bootandy/dust&quot;&gt;Dust&lt;/a&gt; is an alternative for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;du&lt;/code&gt; command. It is fast and has a better UX with nice visualization for disk usage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wfYJPqn.png&quot; alt=&quot;dust&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-6&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; dust
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from https://github.com/bootandy/dust/releases&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
deb-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;du-dust
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dust
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dust
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dust
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;du-dust
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ripgrep&quot;&gt;ripgrep&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt; is a line-oriented search tool that recursively searches your current directory for a regex pattern. It is faster than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; and has many features like compressed files search, colorized output, smart case, file type filtering, multi-threading, and so on. It understands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; files and skips hidden and ignored files. &lt;a href=&quot;https://beyondgrep.com/feature-comparison/&quot;&gt;Here&lt;/a&gt; is a feature comparison with other similar tools, and yes, it is faster than all the other tools in the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bi8838T.png&quot; alt=&quot;ripgrep&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-7&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; ripgrep
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;span class=&quot;c&quot;&gt;# macOS/Linux Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ripgrep
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fd&quot;&gt;fd&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; is a simpler alternative to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt;. It is more intuitive to use and comes with sensible defaults. It is extremely fast due to parallel traversing and shows a modern colorized output and supports patterns and regex, parallel commands, smart case, understands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; files, and so on. I have aliased &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; as I could never remember what options to pass to get a basic find command working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tcSzQ4S.png&quot; alt=&quot;fd&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-8&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fd
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd-find
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd-find
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fd-find
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sd&quot;&gt;sd&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chmln/sd&quot;&gt;sd&lt;/a&gt; is a find-and-replace CLI, and you can use it as a replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;. It is way more user-friendly and modern. It is also magnitudes faster than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation-9&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; sd
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sd
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from the release page&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sd
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
choco &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sd-cli
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sd
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;procs&quot;&gt;procs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dalance/procs&quot;&gt;procs&lt;/a&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt; replacement. It provides colorized human-readable output, multi-column search, more information than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt;, docker support, paging, watch mode, and tree view. It is a much more user-friendly and modern alternative to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt;. You can filter by name and PID and use logical and/or operators to combine multiple filters. It also has a tree view which is very useful for seeing the process hierarchy. It can also show docker container names for the process running docker containers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nvho7hM.png&quot; alt=&quot;procs&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-10&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; procs
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;procs
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from the release page&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;procs
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;procs
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;procs
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;procs
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bottom&quot;&gt;bottom&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ClementTsang/bottom&quot;&gt;bottom&lt;/a&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top&lt;/code&gt; replacement with a nice terminal UI. It’s quite feature-rich and customizable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nbL8gBi.png&quot; alt=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-11&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; bottom
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf copr &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;atim/bottom &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bottom
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; bottom_0.6.8_amd64.deb
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bottom
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bottom
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bottom
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bottom &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;topgrade&quot;&gt;Topgrade&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/topgrade-rs/topgrade&quot;&gt;Topgrade&lt;/a&gt; is a fantastic utility if you prefer to keep your system up-to-date, like me. It detects most of the package managers on your system and triggers updates. It is configurable, so you can configure it to ignore certain package managers. On my system, it detected pacman, SDKMAN, Flatpak, snap, Homebrew, rustup, Linux firmware, Pip, and so on. Topgrade is cross-platform; you can use it on Windows, macOS, and Linux.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7PXryFh.png&quot; alt=&quot;topgrade&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-12&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; topgrade
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS/Debian/Ubuntu/Windows&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from the release page&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;topgrade
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;topgrade
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;topgrade &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;broot&quot;&gt;Broot&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Canop/broot&quot;&gt;Broot&lt;/a&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree&lt;/code&gt; alternative with a better user experience, and you can use it to navigate a file structure. It’s fast and respects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;. You can cd into a directory from the tree view, open sub-directories in a panel, and even preview files. It has excellent keyboard navigation as well. It has many more features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/kAuL7oJ.png&quot; alt=&quot;broot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-13&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; broot
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS/Debian/Ubuntu/Windows&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from release page https://dystroy.org/broot/install/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;broot
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;broot
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;broot &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tokei&quot;&gt;Tokei&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/XAMPPRocky/tokei&quot;&gt;Tokei&lt;/a&gt; is a nice utility to count lines and stats of code. It is very fast, accurate, and has a nice output. It supports over 150 languages and can output in JSON, YAML, CBOR, and human-readable tables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DGFI13M.png&quot; alt=&quot;tokei&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-14&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Arch Linux&lt;/span&gt;
yay &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; tokei
&lt;span class=&quot;c&quot;&gt;# Fedora/CentOS&lt;/span&gt;
dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tokei
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install binary from the release page&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# macOS Homebrew&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tokei
&lt;span class=&quot;c&quot;&gt;# macOS MacPorts&lt;/span&gt;
port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tokei
&lt;span class=&quot;c&quot;&gt;# Windows Scoop&lt;/span&gt;
scoop &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tokei
&lt;span class=&quot;c&quot;&gt;# Cargo&lt;/span&gt;
cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tokei
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-notable-tools&quot;&gt;Other notable tools&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kdash-rs/kdash/&quot;&gt;kdash&lt;/a&gt;: A fast and simple dashboard for Kubernetes. Its created by me :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zellij-org/zellij&quot;&gt;Zellij&lt;/a&gt;: A feature rich modern terminal multiplexer with batteries included.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nushell/nushell&quot;&gt;Nushell&lt;/a&gt;: A modern shell written in Rust. Looks quite promising.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ducaale/xh&quot;&gt;xh&lt;/a&gt;: A HTTPie alternative with better performance.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/y2z/monolith&quot;&gt;monolith&lt;/a&gt;: Convert any webpage into a single HTML file with all assets inlined.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt;: A syntax-highlighting pager for git, diff, and grep output.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sirwart/ripsecrets&quot;&gt;ripsecrets&lt;/a&gt;: Find secret keys in your code before committing them to git.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nerdypepper/eva&quot;&gt;eva&lt;/a&gt;: A CLI REPL calculator.&lt;/li&gt;
  &lt;li&gt;You can find a list of other Rust CLI tools &lt;a href=&quot;https://gist.github.com/sts10/daadbc2f403bdffad1b6d33aff016c0a&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        <media:content url="https://i.imgur.com/KsMv5xG.png" medium="image">https://i.imgur.com/KsMv5xG.png</media:content>
        <pubDate>Mon, 07 Nov 2022 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/rust-terminal-tools-linux-mac-windows-fish-zsh/</link>
        <guid isPermaLink="true">https://deepu.tech/rust-terminal-tools-linux-mac-windows-fish-zsh/</guid>
        
        <category>rust</category>
        
        <category>terminal</category>
        
        <category>linux</category>
        
        <category>macos</category>
        
        
      </item>
    
      <item>
        <title>What the Heck Is Project Loom for Java?</title>
        <description>What the heck is Java&apos;s Project Loom and what does it mean for regular Java developers? | &lt;a href=&quot;https://deepu.tech/state-of-java-project-loom/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;Java has had good multi-threading and concurrency capabilities from early on in its evolution and can effectively utilize multi-threaded and multi-core CPUs. Java Development Kit (JDK) 1.1 had basic support for platform threads (or Operating System (OS) threads), and JDK 1.5 had more utilities and updates to improve concurrency and multi-threading. JDK 8 brought asynchronous programming support and more concurrency improvements. While things have continued to improve over multiple versions, there has been nothing groundbreaking in Java for the last three decades, apart from support for concurrency and multi-threading using OS threads.&lt;/p&gt;

&lt;p&gt;Though the concurrency model in Java is powerful and flexible as a feature, it was not the easiest to use, and the developer experience hasn’t been great. This is primarily due to the shared state concurrency model used by default. One has to resort to synchronizing threads to avoid issues like data races and thread blocking. I wrote more about Java concurrency in my &lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-java/&quot;&gt;Concurrency in modern programming languages: Java&lt;/a&gt; post.&lt;/p&gt;

&lt;h2 id=&quot;what-is-project-loom&quot;&gt;What is Project Loom?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Project Loom aims to drastically reduce the effort of writing, maintaining, and observing high-throughput concurrent applications that make the best use of available hardware.&lt;/p&gt;

  &lt;p&gt;— Ron Pressler (Tech lead, Project Loom)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OS threads are at the core of Java’s concurrency model and have a very mature ecosystem around them, but they also come with some drawbacks and are expensive computationally. Let’s look at the two most common use cases for concurrency and the drawbacks of the current Java concurrency model in these cases.&lt;/p&gt;

&lt;p&gt;One of the most common concurrency use cases is serving requests over the wire using a server. For this, the preferred approach is the thread-per-request model, where a separate thread handles each request. Throughput of such systems can be explained using &lt;a href=&quot;https://en.wikipedia.org/wiki/Little%27s_law&quot;&gt;Little’s law&lt;/a&gt;, which states that in a &lt;strong&gt;stable system&lt;/strong&gt;, the average concurrency (number of requests concurrently processed by the server), &lt;strong&gt;L&lt;/strong&gt;, is equal to the throughput (average rate of requests), &lt;strong&gt;λ&lt;/strong&gt;, times the latency (average duration of processing each request), &lt;strong&gt;W&lt;/strong&gt;. With this, you can derive that throughput equals average concurrency divided by latency (&lt;strong&gt;λ = L/W&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;So in a thread-per-request model, the throughput will be limited by the number of OS threads available, which depends on the number of physical cores/threads available on the hardware. To work around this, you have to use shared thread pools or asynchronous concurrency, both of which have their drawbacks. Thread pools have many limitations, like thread leaking, deadlocks, resource thrashing, etc. Asynchronous concurrency means you must adapt to a more complex programming style and handle data races carefully. There are also chances for memory leaks, thread locking, etc.&lt;/p&gt;

&lt;p&gt;Another common use case is parallel processing or multi-threading, where you might split a task into subtasks across multiple threads. Here you have to write solutions to avoid data corruption and data races. In some cases, you must also ensure thread synchronization when executing a parallel task distributed over multiple threads. The implementation becomes even more fragile and puts a lot more responsibility on the developer to ensure there are no issues like thread leaks and cancellation delays.&lt;/p&gt;

&lt;p&gt;Project Loom aims to fix these issues in the current concurrency model by introducing two new features: &lt;em&gt;virtual threads&lt;/em&gt; and &lt;em&gt;structured concurrency&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;virtual-threads&quot;&gt;Virtual threads&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java 19 is scheduled to be released in September 2022, and Virtual threads will be a preview feature. Yayyy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/425&quot;&gt;Virtual threads&lt;/a&gt; are lightweight threads that are not tied to OS threads but are managed by the JVM. They are suitable for thread-per-request programming styles without having the limitations of OS threads. You can create millions of virtual threads without affecting throughput. This is quite similar to coroutines, like &lt;a href=&quot;https://go.dev/tour/concurrency/1&quot;&gt;goroutines&lt;/a&gt;, made famous by the Go programming language (Golang).&lt;/p&gt;

&lt;p&gt;The new virtual threads in Java 19 will be pretty easy to use. Compare the below with Golang’s goroutines or Kotlin’s coroutines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual thread&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startVirtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Project Loom!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Goroutine&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Goroutines!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kotlin coroutine&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;runBlocking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Kotlin coroutines!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fun fact: before JDK 1.1, Java had support for green threads (aka virtual threads), but the feature was removed in JDK 1.1 as that implementation was not any better than platform threads.&lt;/p&gt;

&lt;p&gt;The new implementation of virtual threads is done in the JVM, where it maps multiple virtual threads to one or more OS threads, and the developer can use virtual threads or platform threads as per their needs. A few other important aspects of this implementation of virtual threads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread&lt;/code&gt; in code, runtime, debugger, and profiler&lt;/li&gt;
  &lt;li&gt;It’s a Java entity and not a wrapper around a native thread&lt;/li&gt;
  &lt;li&gt;Creating and blocking them are cheap operations&lt;/li&gt;
  &lt;li&gt;They should not be pooled&lt;/li&gt;
  &lt;li&gt;Virtual threads use a work-stealing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForkJoinPool&lt;/code&gt; scheduler&lt;/li&gt;
  &lt;li&gt;Pluggable schedulers can be used for asynchronous programming&lt;/li&gt;
  &lt;li&gt;A virtual thread will have its own stack memory&lt;/li&gt;
  &lt;li&gt;The virtual threads API is very similar to platform threads and hence easier to adopt/migrate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at some examples that show the power of virtual threads.&lt;/p&gt;

&lt;h4 id=&quot;total-number-of-threads&quot;&gt;Total number of threads&lt;/h4&gt;

&lt;p&gt;First, let’s see how many platform threads vs. virtual threads we can create on a machine. My machine is Intel Core i9-11900H with 8 cores, 16 threads, and 64GB RAM running Fedora 36.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Platform threads&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thread count = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LockSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;park&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On my machine, the code crashed after &lt;strong&gt;32_539&lt;/strong&gt; platform threads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual threads&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startVirtualThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thread count = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LockSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;park&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On my machine, the process hung after &lt;strong&gt;14_625_956&lt;/strong&gt; virtual threads but didn’t crash, and as memory became available, it kept going slowly. You may be wondering why this behavior! It’s due to the parked virtual threads being garbage collected, and the JVM is able to create more virtual threads and assign them to the underlying platform thread.&lt;/p&gt;

&lt;h4 id=&quot;task-throughput&quot;&gt;Task throughput&lt;/h4&gt;

&lt;p&gt;Let’s try to run 100,000 tasks using platform threads.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newThreadPerTaskExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultThreadFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newThreadPerTaskExecutor&lt;/code&gt; with the default thread factory and thus uses a thread group. When I ran this code and timed it, I got the numbers shown here. I get better performance when I use a thread pool with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Executors.newCachedThreadPool()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# &apos;newThreadPerTaskExecutor&apos; with &apos;defaultThreadFactory&apos;&lt;/span&gt;
0:18.77 real,   18.15 s user,   7.19 s sys,     135% 3891pu,    0 amem,         743584 mmem
&lt;span class=&quot;c&quot;&gt;# &apos;newCachedThreadPool&apos; with &apos;defaultThreadFactory&apos;&lt;/span&gt;
0:11.52 real,   13.21 s user,   4.91 s sys,     157% 6019pu,    0 amem,         2215972 mmem
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not so bad. Now, let’s do the same using virtual threads.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newVirtualThreadPerTaskExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I run and time it, I get the following numbers.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;0:02.62 real,   6.83 s user,    1.46 s sys,     316% 14840pu,   0 amem,         350268 mmem
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is far more performant than using platform threads with thread pools. Of course, these are simple use cases; both thread pools and virtual thread implementations can be further optimized for better performance, but that’s not the point of this post.&lt;/p&gt;

&lt;p&gt;Running Java Microbenchmark Harness (JMH) with the same code gives the following results, and you can see that virtual threads outperform platform threads by a huge margin.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Throughput&lt;/span&gt;
Benchmark                             Mode  Cnt  Score   Error  Units
LoomBenchmark.platformThreadPerTask  thrpt    5  0.362 ± 0.079  ops/s
LoomBenchmark.platformThreadPool     thrpt    5  0.528 ± 0.067  ops/s
LoomBenchmark.virtualThreadPerTask   thrpt    5  1.843 ± 0.093  ops/s

&lt;span class=&quot;c&quot;&gt;# Average time&lt;/span&gt;
Benchmark                             Mode  Cnt  Score   Error  Units
LoomBenchmark.platformThreadPerTask   avgt    5  5.600 ± 0.768   s/op
LoomBenchmark.platformThreadPool      avgt    5  3.887 ± 0.717   s/op
LoomBenchmark.virtualThreadPerTask    avgt    5  1.098 ± 0.020   s/op
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the benchmark &lt;a href=&quot;https://github.com/deepu105/java-loom-benchmarks&quot;&gt;source code on GitHub&lt;/a&gt;. Here are some other meaningful benchmarks for virtual threads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An interesting benchmark using ApacheBench &lt;a href=&quot;https://github.com/ebarlas/project-loom-comparison&quot;&gt;on GitHub&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ElliotBarlas&quot;&gt;Elliot Barlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A benchmark using Akka actors &lt;a href=&quot;https://medium.com/@zakgof/a-simple-benchmark-for-jdk-project-looms-virtual-threads-4f43ef8aeb1&quot;&gt;on Medium&lt;/a&gt; by &lt;a href=&quot;https://medium.com/@zakgof&quot;&gt;Alexander Zakusylo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JMH benchmarks for I/O and non-I/O tasks &lt;a href=&quot;https://github.com/colincachia/loom-benchmark&quot;&gt;on GitHub&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/colincachia&quot;&gt;Colin Cachia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;structured-concurrency&quot;&gt;Structured concurrency&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Structured concurrency will be an incubator feature in Java 19.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/428&quot;&gt;Structured concurrency&lt;/a&gt; aims to simplify multi-threaded and parallel programming. It treats multiple tasks running in different threads as a single unit of work, streamlining error handling and cancellation while improving reliability and observability. This helps to avoid issues like thread leaking and cancellation delays. Being an incubator feature, this might go through further changes during stabilization.&lt;/p&gt;

&lt;p&gt;Consider the following example using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent.ExecutorService&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theInventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Join updateInventory&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Join updateOrder&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inventory &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theInventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; updated for order &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; subtasks to be executed concurrently. Each of those can succeed or fail independently. Ideally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; method should fail if any subtask fails. However, if a failure occurs in one subtask, things get messy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Imagine that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; fails and throws an exception. Then, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; method throws an exception when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inventory.get()&lt;/code&gt;. So far this is fine, but what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt;? Since it runs on its own thread, it can complete successfully. But now we have an issue with a mismatch in inventory and order. Suppose the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; is an expensive operation. In that case, we are just wasting the resources for nothing, and we will have to write some sort of guard logic to revert the updates done to order as our overall operation has failed.&lt;/li&gt;
  &lt;li&gt;Imagine that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; is an expensive long-running operation and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; throws an error. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; task will be blocked on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inventory.get()&lt;/code&gt; even though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; threw an error. Ideally, we would like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; task to cancel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; when a failure occurs in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; so that we are not wasting time.&lt;/li&gt;
  &lt;li&gt;If the thread executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; is interrupted, the interruption is not propagated to the subtasks. In this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; will leak and continue to run in the background.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these situations, we would have to carefully write workarounds and failsafe, putting all the burden on the developer.&lt;/p&gt;

&lt;p&gt;We can achieve the same functionality with structured concurrency using the code below.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StructuredTaskScope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ShutdownOnFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Join both forks&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;throwIfFailed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ... and propagate errors&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Here, both forks have succeeded, so compose their results&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inventory &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resultNow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; updated for order &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resultNow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unlike the previous sample using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt;, we can now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructuredTaskScope&lt;/code&gt; to achieve the same result while confining the lifetimes of the subtasks to the lexical scope, in this case, the body of the &lt;em&gt;try-with-resources&lt;/em&gt; statement. The code is much more readable, and the intent is also clear. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructuredTaskScope&lt;/code&gt; also ensures the following behavior automatically.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Error handling with short-circuiting&lt;/strong&gt; — If either the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; fails, the other is canceled unless its already completed. This is managed by the cancellation policy implemented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShutdownOnFailure()&lt;/code&gt;; other policies are possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cancellation propagation&lt;/strong&gt; — If the thread running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleOrder()&lt;/code&gt; is interrupted before or during the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join()&lt;/code&gt;, both forks are canceled automatically when the thread exits the scope.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Observability&lt;/strong&gt; — A thread dump would clearly display the task hierarchy, with the threads running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateInventory()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateOrder()&lt;/code&gt; shown as children of the scope.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;state-of-project-loom&quot;&gt;State of Project Loom&lt;/h2&gt;

&lt;p&gt;The Loom project started in 2017 and has undergone many changes and proposals. Virtual threads were initially called fibers, but later on they were renamed to avoid confusion. Today with Java 19 getting closer to release, the project has delivered the two features discussed above. One as a preview and another as an incubator. Hence the path to stabilization of the features should be more precise.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-mean-to-regular-java-developers&quot;&gt;What does this mean to regular Java developers?&lt;/h2&gt;

&lt;p&gt;When these features are production ready, it should not affect regular Java developers much, as these developers may be using libraries for concurrency use cases. But it can be a big deal in those rare scenarios where you are doing a lot of multi-threading without using libraries. Virtual threads could be a no-brainer replacement for all use cases where you use thread pools today. This will increase performance and scalability in most cases based on the benchmarks out there. Structured concurrency can help simplify the multi-threading or parallel processing use cases and make them less fragile and more maintainable.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-mean-to-java-library-developers&quot;&gt;What does this mean to Java library developers?&lt;/h2&gt;

&lt;p&gt;When these features are production ready, it will be a big deal for libraries and frameworks that use threads or parallelism. Library authors will see huge performance and scalability improvements while simplifying the codebase and making it more maintainable. Most Java projects using thread pools and platform threads will benefit from switching to virtual threads. Candidates include Java server software like Tomcat, Undertow, and Netty; and web frameworks like Spring and Micronaut. I expect most Java web technologies to migrate to virtual threads from thread pools. Java web technologies and trendy reactive programming libraries like RxJava and Akka could also use structured concurrency effectively. This doesn’t mean that virtual threads will be the one solution for all; there will still be use cases and benefits for asynchronous and reactive programming.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The cover image was created using a photo by &lt;a href=&quot;https://unsplash.com/@tama66&quot;&gt;Peter Herrmann&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was originally published on the &lt;a href=&quot;https://developer.okta.com/blog/2022/08/26/state-of-java-project-loom&quot;&gt;Okta Developer Blog&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        <media:content url="https://i.imgur.com/7FfOmmD.jpeg" medium="image">https://i.imgur.com/7FfOmmD.jpeg</media:content>
        <pubDate>Sat, 27 Aug 2022 00:00:00 +0200</pubDate>
        <link>https://deepu.tech/state-of-java-project-loom/</link>
        <guid isPermaLink="true">https://deepu.tech/state-of-java-project-loom/</guid>
        
        <category>java</category>
        
        <category>concurrency</category>
        
        <category>loom</category>
        
        <category>openjdk</category>
        
        
      </item>
    
      <item>
        <title>Golang Finally Gets Generics! Does It Make Go a Better Language?</title>
        <description>Let&apos;s see if Golang became better with the addition of generics. | &lt;a href=&quot;https://deepu.tech/go-impressions-part-2/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;So Golang finally made the sane decision to add support for generics, in version 1.18, after dragging it out for years and after multiple proposals. Well, simplicity is nice when you are a newbie in the language but becomes annoying really fast, in my personal experience, especially in large codebases.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;So &lt;a href=&quot;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#golang&lt;/a&gt; finally makes the sane decision to introduce Generics in version 1.18 &lt;br /&gt;&lt;br /&gt;Finally people can get rid of like atleast 1/3 of their codebase which is basically just finding an element from an array or map 😂😂😂&lt;br /&gt;&lt;br /&gt;They could have kept the syntax as &amp;lt;&amp;gt; though 🤷‍♂️&lt;/p&gt;&amp;mdash; @deepu105@mastodon.social (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1505784416471158788?ref_src=twsrc%5Etfw&quot;&gt;March 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;As a polyglot developer who has worked extensively in Golang for a few years, I have been quite critical of it &lt;a href=&quot;https://deepu.tech/reflection-on-golang/&quot;&gt;in a previous blog post titled “My reflections on Golang”&lt;/a&gt;, written in 2019. If you are ready to be triggered, go ahead and read that post and come back here. One of my biggest gripes was that Go didn’t have generics. So now that it has generics, I decided to re-evaluate my opinions about Go.&lt;/p&gt;

&lt;h2 id=&quot;generics-in-go&quot;&gt;Generics in Go&lt;/h2&gt;

&lt;p&gt;First, let’s see how generics work in Go. Fortunately, generics in Go work pretty much the same way as in other languages like C++, Java, C#, and Rust. Of course, there will be some minor differences and some missing features since the Go version is, as you guessed, simpler. The design document for generics has some &lt;a href=&quot;https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#comparison-with-java&quot;&gt;comparisons with Java, C++, and Rust&lt;/a&gt;.
Though I would have preferred to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; syntax to keep in line with most other popular languages, there seem to be &lt;a href=&quot;https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#why-not-use-the-syntax-like-c_and-java&quot;&gt;pretty good reasons&lt;/a&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; instead, like avoiding ambiguity when mixed with channels and multiple variables assignments.&lt;/p&gt;

&lt;p&gt;Let’s look at some examples. One common use case where Go developers usually write duplicated code is array and map operations like find, filter, map, and reduce. I can remember being annoyed about this and for the lack of a library like &lt;a href=&quot;https://lodash.com&quot;&gt;Lodash&lt;/a&gt; for the same reason. With generics, you can finally write reusable utility code once and use it for all data types.&lt;/p&gt;

&lt;p&gt;Let’s write a findIndex method for arrays with and without generics.&lt;/p&gt;

&lt;h3 id=&quot;without-generics&quot;&gt;Without generics&lt;/h3&gt;

&lt;p&gt;Without generics, you would write a function for each type of data you want to use, and as you start using structs, you would need a function for every unique struct. In large codebases, it’s common to find thousands and thousands of lines of code just covering utilities where the only difference would be the type of argument in the method signature. This is the complete opposite of the DRY (Don’t repeat yourself) principle. Every time you have to use a new data type, you must write a new function or a new block of code. Yikes!&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromStringArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromIntArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromFloat64Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromStringArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromIntArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromFloat64Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// and more&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;with-generics&quot;&gt;With generics&lt;/h3&gt;

&lt;p&gt;You can simplify the above code to one function with generics, and it will work for all possible data types you pass.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindIndexFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generics would significantly reduce duplicated code in your codebase. You can also write other useful generic functions like map, reduce, filter, and so on for arrays and maps. Here are some &lt;a href=&quot;https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#examples&quot;&gt;examples from the official design document&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;// Map over any slice using the given mapping function.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;floats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Reduce any slice using the given reduction function.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Filter any slice using the given predicate function.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;evens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Keys returns a slice of keys from a map.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When declaring generic types, the type can be specific (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T comparable&lt;/code&gt;), any (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T any&lt;/code&gt;), approximate (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T ~string&lt;/code&gt;), or a union (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T int64 | float64 | int&lt;/code&gt;). Type constraints can be defined as type aliases as well.&lt;/p&gt;

&lt;p&gt;Like in Java or Rust, you can use generics in Go for functions, struct containers, interface implementations, etc. This can help to reduce boilerplate code and make writing Go code much more enjoyable.&lt;/p&gt;

&lt;h2 id=&quot;does-this-make-go-better&quot;&gt;Does this make Go better?&lt;/h2&gt;

&lt;p&gt;Yes! Without a doubt, generics make Go much more enjoyable to write. While generics adds a bit of complexity, IMO the amount of boilerplate you can get rid of is worth that added complexity. For polyglot developers, who are used to languages like Java, TypeScript, Rust, C#, or C++, this is an excellent feature that might sway them to try Go. I talked about the things I liked in Go in my &lt;a href=&quot;https://deepu.tech/reflection-on-golang/&quot;&gt;previous post&lt;/a&gt;, so I’m not going to reiterate that here. Let’s see if what I didn’t like remains the same and if generics help alleviate those pain points. Please note that this is very opinionated base on my tastes and experiences, especially as a polyglot developer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt;: ✅ Finally here and works great&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error handling&lt;/strong&gt;: ❌ It is still tedious and needs boilerplate&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Default values&lt;/strong&gt;: ❌ There is still no default values for methods&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Too much boilerplate&lt;/strong&gt;: ✅ Introduction of generics will remove a lot of it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependency management&lt;/strong&gt;: ❌ Still not a fan of Go’s dependency management and especially the way breaking versions are handled&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Source code in GOPATH&lt;/strong&gt;: ✅ Not a problem anymore with Go modules&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Confusing pointer behaviors&lt;/strong&gt;: ❌ Pointers are still confusing and need to be used with care&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Struct hell&lt;/strong&gt;: ✅ Generics should help to make this pain point much less painful&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Weird interface construct&lt;/strong&gt;: ❌ I’m still not a fan of this, and IMO Rust has a much better design here&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Single GC algorithm&lt;/strong&gt;: ❌ Maybe I’m just spoiled by Java. Many testimonials detail how &lt;a href=&quot;https://deepu.tech/memory-management-in-golang/&quot;&gt;the Go GC algorithm&lt;/a&gt; doesn’t work in some use cases.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developer experience&lt;/strong&gt;: ✅ I would say this has improved over the years. Still not as good as Rust, but better than many other languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-does-that-leave-go&quot;&gt;Where does that leave Go?&lt;/h2&gt;

&lt;p&gt;Recently I was pretty interested in systems programming and CLIs. I would have used Go for those if I hadn’t known Rust. Once I started using Rust, I gave up on Go, as &lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/&quot;&gt;I didn’t see much reason to use it over Rust&lt;/a&gt; for the use cases that I was interested in. Honestly, the annoyance with Go was one reason that prompted me to learn Rust. I did use Go for some simple stuff like building a &lt;a href=&quot;https://github.com/deepu105/keylight&quot;&gt;CLI for the Elgato Keylights&lt;/a&gt;, and probably if I had a use case of building microservices, then I might have given Go a thought along with Java. With generics making Go much better, IMO, I might give Go more weightage for microservices and simple CLIs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Image derived from work in &lt;a href=&quot;https://github.com/egonelbre/gophers&quot;&gt;egonelbre/gophers&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/egonelbre&quot;&gt;@egonelbre&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        <media:content url="https://i.imgur.com/WGkshhB.jpeg" medium="image">https://i.imgur.com/WGkshhB.jpeg</media:content>
        <pubDate>Mon, 04 Apr 2022 00:00:00 +0200</pubDate>
        <link>https://deepu.tech/go-impressions-part-2/</link>
        <guid isPermaLink="true">https://deepu.tech/go-impressions-part-2/</guid>
        
        <category>go</category>
        
        <category>programming</category>
        
        <category>languages</category>
        
        <category>thepragmaticprogrammer</category>
        
        
      </item>
    
      <item>
        <title>Concurrency in modern programming languages: Rust vs Go vs Java vs Node.js vs Deno vs .NET 6</title>
        <description>Building a concurrent web server in Rust, Go, JS, TS, .NET, and Java to compare concurrency performance | &lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-final/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;This is a multi-part series where I’ll discuss concurrency in modern programming languages. I will be building and benchmarking a concurrent web server, inspired by the example from the &lt;a href=&quot;https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html&quot;&gt;Rust book&lt;/a&gt;, in popular languages like Rust, Go, JavaScript (NodeJS), TypeScript (Deno), Kotlin, and Java to compare concurrency and its performance between these languages/platforms. The chapters of this series are as below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages/&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-rust/&quot;&gt;Concurrent web server in Rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-go/&quot;&gt;Concurrent web server in Golang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-js/&quot;&gt;Concurrent web server in JavaScript with NodeJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-ts/&quot;&gt;Concurrent web server in TypeScript with Deno&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages-java/&quot;&gt;Concurrent web server in Java with JVM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comparison and conclusion of benchmarks&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-concurrency&quot;&gt;What is concurrency&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concurrency is one of the most complex aspects of programming, and depending on your language of choice, the complexity can be anywhere from “that looks confusing” to “what black magic is this”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Concurrency is the ability where multiple tasks can be executed in overlapping time periods, in no specific order without affecting the final outcome. Concurrency is a very broad term and can be achieved by multi-threading, parallelism, and/or asynchronous processing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/glpIttD.jpeg&quot; alt=&quot;concurrency&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, I suggest you read the &lt;a href=&quot;https://deepu.tech/concurrency-in-modern-languages/&quot;&gt;introduction post&lt;/a&gt; to understand this post better.&lt;/p&gt;

&lt;h2 id=&quot;benchmarking--comparison&quot;&gt;Benchmarking &amp;amp; comparison&lt;/h2&gt;

&lt;p&gt;In the previous posts, I built a simple web server in Rust, Go, Node.js, Deno, and Java. I kept it as simple as possible without using external dependencies as much as possible. I also kept the code similar across languages. In this final post, we will compare the performance of all these implementations to see which language offers the best performance for a concurrent web server.&lt;/p&gt;

&lt;p&gt;If the language supports both asynchronous and multi-threaded concurrency, we will try both and a combination of both and pick the best performer for the comparison. The complexity of the application will hence depend on language features and language complexity. We will use whatever the language provides to make concurrency performance as good as possible without over-complicating stuff. The web server will just serve one endpoint&lt;del&gt;, and it will add a sleep of two seconds on every tenth request. This will simulate a more realistic load, IMO.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;We will use promises, thread pools, and workers if required and if the language supports it. We won’t use any unnecessary I/O in the application.&lt;/p&gt;

&lt;p&gt;The code implementations are probably not the best possible; if you have a suggestion for improvement, please open and issue or PR on &lt;a href=&quot;https://github.com/deepu105/concurrency-benchmarks&quot;&gt;this repository&lt;/a&gt;. Further improvements possible are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use a thread pool for Java multi-threaded version&lt;/li&gt;
  &lt;li&gt;Use a Java webserver library&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://github.com/deepu105/concurrency-benchmarks/issues/5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createReadStream&lt;/code&gt; for Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Use Warp, Rocket or actix-web for Rust&lt;/del&gt; Added a Rust actix-web sample to comparison&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/strong&gt;: I’m not claiming this to be an accurate scientific method or the best benchmark for concurrency. I’m pretty sure different use cases will have different results, and real-world web servers will have more complexity that requires communication between concurrent processes affecting performance. I’m just trying to provide some simple base comparisons for a simple use case. Also, my knowledge of some languages is better than others; hence I might miss some optimizations here and there. So please don’t shout at me. If you think the code for a particular language can be improved out of the box to enhance concurrency performance, let me know. If you think this benchmark is useless, well, please suggest a better one :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Despite the above disclaimer, people were still mad at me for using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread.sleep&lt;/code&gt; to simulate blocking and for using ApacheBench for this benchmark. I have since updated the post with more benchmarks using different tools. It’s still not scientific or the best way to benchmark concurrency. This is just me, doing experiments. If you have better ideas, please feel free to use the code and publish a follow-up or comment with your results, and I’ll update the post with it and attribute you.&lt;/p&gt;

&lt;p&gt;All the implementations used in this comparison can be found in &lt;a href=&quot;https://github.com/deepu105/concurrency-benchmarks/tree/nosleep&quot;&gt;the nosleep branch of this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;benchmarking-conditions&quot;&gt;Benchmarking conditions&lt;/h3&gt;

&lt;p&gt;These will be some of the conditions I’ll use for the benchmark.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The latest stable release versions of language/runtimes available are used, and as of writing, those are:
    &lt;ul&gt;
      &lt;li&gt;Rust: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.58.1-Stable&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Go: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.17.6&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Java: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenJDK 17.0.2&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Node.js: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17.4.0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Deno: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.18.1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;.NET: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6.0.100&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;: Thread.sleep has been removed from all implementations.&lt;/li&gt;
  &lt;li&gt;We will be using external dependencies only if that is the standard recommended way in the language.
    &lt;ul&gt;
      &lt;li&gt;latest versions of such dependencies as of writing will be used&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We are not going to look at improving concurrency performance using any configuration tweaks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;: Many people pointed out that ApacheBench is not the best tool for this benchmark. I have hence also included results from &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt; and &lt;a href=&quot;https://github.com/fcsonline/drill&quot;&gt;drill&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We will use ApacheBench for the benchmarks with the below settings:
    &lt;ul&gt;
      &lt;li&gt;Concurrency factor of 100 requests&lt;/li&gt;
      &lt;li&gt;10000 total requests&lt;/li&gt;
      &lt;li&gt;The benchmark will be done ten times for each language with a warmup round, and the mean values will be used.&lt;/li&gt;
      &lt;li&gt;ApacheBench version on Fedora: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpd-tools-2.4.52-1.fc35.x86_64&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Command used: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ab -c 100 -n 10000 http://localhost:8080/&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All the benchmarks are run on the same machine running Fedora 35 on an Intel i9-11900H (8 core/16 thread) processor with 64GB memory.
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrk&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drill&lt;/code&gt; clients were run from another similar machine on the same network and also from the same computer; the results were more or less the same; I used the results from the client computer for comparisons.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;comparison-parameters&quot;&gt;Comparison parameters&lt;/h3&gt;

&lt;p&gt;I’ll be comparing the below aspects related to concurrency as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Performance, based on benchmark results&lt;/li&gt;
  &lt;li&gt;Community consensus&lt;/li&gt;
  &lt;li&gt;Ease of use and simplicity, especially for complex use cases&lt;/li&gt;
  &lt;li&gt;External libraries and ecosystem for concurrency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;benchmark-results&quot;&gt;Benchmark results&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt;: I have updated the benchmark results with the results from &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt;, &lt;a href=&quot;https://github.com/fcsonline/drill&quot;&gt;drill&lt;/a&gt; and also updated previous results from ApacheBench after tweaks suggested by various folks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;: There is a &lt;a href=&quot;https://github.com/deepu105/concurrency-benchmarks/tree/nosleep/dotnetws&quot;&gt;.NET 6 version&lt;/a&gt; in the repo now, thanks to &lt;a href=&quot;https://github.com/srollinet&quot;&gt;srollinet&lt;/a&gt; for the PR. Benchmarks updated with the .NET results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;: Rust using actix-web and Java undertow is now included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrk&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drill&lt;/code&gt; benchmarks. The implementations were simplified to return just a string instead of doing a file I/O for these, and hence they are shown as a separate set. I started this series as a concurrency in languages experiment. Now, this feels like a benchmark of web server frameworks; while concurrency is an important aspect of these, I’m not sure if the results mean anything from a concurrency of the language aspect.&lt;/p&gt;

&lt;h3 id=&quot;results-from-wrk&quot;&gt;Results from &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Benchmark using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrk&lt;/code&gt; with the below command (Threads 8, Connections 500, duration 30 seconds):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;wrk -t8 -c500 -d30s http://127.0.0.1:8080
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/j83tChU.png&quot; alt=&quot;wrk benchmarks with Go HTTP version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; comparison of Go HTTP, Rust actix-web, Java Undertow, and .NET 6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sUMZ1OX.png&quot; alt=&quot;wrk benchmarks with web servers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Go, Rust, and Java web server versions blow everything out of the water when it comes to req/second performance. If we remove it, we get a better picture as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rDWT8Mi.png&quot; alt=&quot;wrk benchmarks without web servers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;results-from-drill&quot;&gt;Results from &lt;a href=&quot;https://github.com/fcsonline/drill&quot;&gt;drill&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Benchmark using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drill&lt;/code&gt; with concurrency 1000 and 1 million requests&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/z4K0lJ8.png&quot; alt=&quot;drill benchmark 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; comparison of Go HTTP, Rust actix-web, Java Undertow, and .NET 6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eWDkxyz.png&quot; alt=&quot;drill benchmark 1 with web servers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Benchmark using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drill&lt;/code&gt; with concurrency 2000 and 1 million requests&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Xfp1trI.png&quot; alt=&quot;drill benchmark 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; comparison of Go HTTP, Rust actix-web, Java Undertow, and .NET 6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qF5BsSj.png&quot; alt=&quot;drill benchmark 2 with web servers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;previous-apachebench-results-with-thread-blocking&quot;&gt;Previous ApacheBench results with thread blocking&lt;/h3&gt;

&lt;p&gt;The average values for different metrics with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread.sleep&lt;/code&gt; every ten requests across ten benchmark runs are as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/r84p64Q.png&quot; alt=&quot;Apache bench average&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find all the results used in the &lt;a href=&quot;https://github.com/deepu105/concurrency-benchmarks/tree/nosleep/results&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Based on the benchmark results, these are my observations.&lt;/p&gt;

&lt;h3 id=&quot;benchmark-observations&quot;&gt;Benchmark observations&lt;/h3&gt;

&lt;p&gt;Since recommendations based on benchmarks are hot topics, I’ll just share my observations, and you can make decisions yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For the HTTP server benchmark using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrk&lt;/code&gt;, Go HTTP wins in request/sec, latency, and throughput, but it uses more memory and CPU than Rust. This might be because Go has one of the best built-in HTTP libraries, and it’s extremely tuned for the best possible performance; hence it’s not fair to compare that with the simple TCP implementations I did for Java and Rust. But you can compare it to Node.js and Deno as they also have standard HTTP libs that are used here for benchmarks. &lt;strong&gt;Update&lt;/strong&gt;: I have now compared Go HTTP to Rust actix-web and Java Undertow, and surprisingly Undertow performs better, and actix-web comes second. Probably a Go web framework, like Gin, will come closer to Undertow and actix-web.&lt;/li&gt;
  &lt;li&gt;The Go TCP version is a fair comparison to the Rust and Java implementations, and in this case, Both Java and Rust outperforms Go and hence would be logical to expect third party HTTP libraries in Rust and Java that can compete with Go and if I’m a betting person I would bet that there is a Rust library that can outperform Go.&lt;/li&gt;
  &lt;li&gt;Resource usage is a whole different story, Rust seems to use the least memory and CPU consistently in all the benchmarks, while Java uses the most memory, and Node.js multi-threaded version uses the most CPU.&lt;/li&gt;
  &lt;li&gt;Asynchronous Rust seems to perform worst than multi-threaded Rust implementations.&lt;/li&gt;
  &lt;li&gt;In the benchmarks using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drill&lt;/code&gt;, the Asynchronous Java version outperformed Rust and was a surprise to me.&lt;/li&gt;
  &lt;li&gt;Java and Deno have more failed requests than others.&lt;/li&gt;
  &lt;li&gt;When concurrent requests are increased from 1000 to 2000, most implementations have a very high failure rate. The Go HTTP and Rust Tokio versions have nearly 100% failure rates, while multi-threaded Node.js have the least failure and have good performance at that concurrency level but with high CPU usage. It runs multiple versions of V8 for multi-threading, which explains the high CPU use.&lt;/li&gt;
  &lt;li&gt;Overall, Node.js still seems to perform better than Deno.&lt;/li&gt;
  &lt;li&gt;Another important takeaway is that benchmarking tools like ApacheBench, wrk, or drill seem to offer very different results, and hence micro-benchmarks are not as reliable as ultimate performance benchmarks. Based on the actual use case and implementation-specific details, there could be a lot of differences. Thanks to &lt;a href=&quot;https://dev.to/eamonnerbonne/comment/1lpkf&quot;&gt;Eamon Nerbonne for pointing it out&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Apache Benchmarks run on versions with and without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread.sleep&lt;/code&gt; doesn’t say much as the results are similar for all implementations, and it might be due to limitations of the ApacheBench tool. Hence as many people pointed out, I’m disregarding them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more comprehensive benchmarks for web frameworks, I recommend checking out TechEmpower’s &lt;a href=&quot;https://www.techempower.com/benchmarks/&quot;&gt;Web framework benchmarks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;With ApacheBench, as you can see, there isn’t any significant difference between the languages when it comes to total time taken for 10k requests for a system with considerable thread blocking, which means for a real-world use case, the language choice isn’t going to be a huge factor for concurrency performance. But of course, if you want the best possible performance, then Rust clearly seems faster than other languages as it gives you the highest throughput, followed by Java and Golang. JavaScript and TypeScript are behind them, but not by a considerable margin. The Go version using the built-in HTTP server is the slowest of the bunch due to inconsistent performance across runs, probably due to garbage collection (GC) kicking in, causing spikes. Also interesting is to see the difference between the multi-threaded and asynchronous approaches. While for Rust, multi-threaded implementation performs the best by a slight margin, the asynchronous version performs slightly better for Java and JavaScript. But none of the differences is significant enough to justify suggesting one approach over another for this particular case. But in general, I would recommend using the asynchronous approach if available as it’s more flexible without some of the limitations you might encounter with threads.&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;community-consensus&quot;&gt;Community consensus&lt;/h3&gt;

&lt;p&gt;The community consensus when it comes to concurrency performance is quite split. For example, both Rust and Go communities claim to be the best in concurrency performance. From personal experience, I find them relatively close in performance, with Rust having a slight lead over Go. The Node.js ecosystem was built over the promise of asynchronous concurrency performance, and there are testimonials of huge performance improvements when switching to Node.js. Java also boasts of real-world projects serving millions of concurrent requests without any issues; hence it’s hard to take a side here.&lt;/p&gt;

&lt;p&gt;Another general observation is that Rust was quite consistent in terms of performance across runs while all other languages had some variance, especially when GC kicks in.&lt;/p&gt;

&lt;h3 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h3&gt;

&lt;p&gt;While performance is an important aspect, ease of use and simplicity is also very important. I think it’s also important to differentiate between asynchronous and multi-threaded approaches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: I personally find Node.js and Deno the simplest and easy-to-use platforms for async concurrency. Golang would be my second choice as it’s also easy to use and simple without compromising on features or performance. Rust follows it as it is a bit more complex as it has more features and needs getting used to. I would rate Java last as it requires much more boilerplate, and doing asynchronous programming is more complex than in others. I hope project Loom fixes that for Java.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-threaded&lt;/strong&gt;: For multi-threaded concurrency, I will put Rust first as it’s packed with features, and doing multi-threading is easy and worry-free in Rust due to memory and thread-safety. You don’t have to worry about race conditions and such. I’ll put Java and Go second here. Java has a mature ecosystem for multi-threading and is not too difficult to use. Go is very easy to use, but you don’t have a lot of control over OS threads else I would rate Go higher than Java. Finally, there are multi-threading capabilities in Node.js and Deno, but they are not as flexible as other languages; hence I’ll put them last.&lt;/p&gt;

&lt;h3 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h3&gt;

&lt;p&gt;Rust has the best ecosystem for concurrency, in my opinion, followed by Java and Golang, which have matured options. Node.js and Deno, while not as good as others, offer a descent ecosystem as well.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        <media:content url="https://i.imgur.com/JGoa8Xe.png" medium="image">https://i.imgur.com/JGoa8Xe.png</media:content>
        <pubDate>Fri, 04 Feb 2022 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/concurrency-in-modern-languages-final/</link>
        <guid isPermaLink="true">https://deepu.tech/concurrency-in-modern-languages-final/</guid>
        
        <category>rust</category>
        
        <category>js</category>
        
        <category>go</category>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>The state of pattern matching in Java 17</title>
        <description>Let us see how pattern matching is evolving in Java | &lt;a href=&quot;https://deepu.tech/state-of-pattern-matching-java/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;So what exactly is pattern matching?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The act of checking a given sequence of tokens for the presence of the constituents of some pattern&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Wikipedia&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or simply put, it’s a language feature where you can test for a specific pattern on a character sequence or a data structure. Pattern matching can be classified into two types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sequence patterns&lt;/strong&gt;: pattern matching on character sequence or strings. Also known as our beloved Regular Expressions 😉 — I still wish I could write RegEx without cursing and looking up the syntax.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tree patterns&lt;/strong&gt;: testing for patterns on a data structure. This is what we are going to talk about today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/M6xKDas.jpeg&quot; alt=&quot;regex meme&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-pattern-matching&quot;&gt;Why Pattern matching?&lt;/h2&gt;

&lt;p&gt;Why do we need pattern matching? We don’t, to be honest!&lt;/p&gt;

&lt;p&gt;Pattern matching is not a requirement for a good programming language. Many of the most popular languages like JavaScript, Java, and Go get by just fine without it. But still, it’s a great feature to have due to these advantages it offers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduced cognitive complexity
    &lt;ul&gt;
      &lt;li&gt;Much more concise code and better readability.&lt;/li&gt;
      &lt;li&gt;More complex logic can be expressed with fewer lines of code. While not very important, it’s still a good thing.&lt;/li&gt;
      &lt;li&gt;Simpler to write and maintain.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reduced reliance on reflection and casting, especially in Java.&lt;/li&gt;
  &lt;li&gt;Avoid bugs caused by pattern dominance and pattern non-exhaustiveness.
    &lt;ul&gt;
      &lt;li&gt;Pattern dominance is when a previous pattern supersedes another making it unreachable. A modern compiler should be able to catch it.&lt;/li&gt;
      &lt;li&gt;Pattern exhaustiveness is when the compiler warns you when you have not checked for all possible variants of a type, like having a case for all enum values or all subclasses of a type and so on.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, these advantages depend on how a language implements pattern matching. So later, we will look at these from the perspective of Java.&lt;/p&gt;

&lt;h2 id=&quot;pattern-matching-features&quot;&gt;Pattern matching features&lt;/h2&gt;

&lt;p&gt;These are many languages that have great support for pattern matching. Rust and OCaml lead the pack here. On the JVM world, Scala also offers many of these pattern matching features. So when a language claims to have support for pattern matching, these are the features we expect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enum matching in switch statements — Most languages, including Java, already does this&lt;/li&gt;
  &lt;li&gt;Match the value in switch/if statements — Common in any Turing complete language&lt;/li&gt;
  &lt;li&gt;Match type in switch/if statements — Required for pattern matching&lt;/li&gt;
  &lt;li&gt;Pattern matched variable assignments&lt;/li&gt;
  &lt;li&gt;Null checks — Required in a language like Java&lt;/li&gt;
  &lt;li&gt;Type guards&lt;/li&gt;
  &lt;li&gt;Refined patterns — If we can match for data types, then its logical to expect refining the pattern further using the matched type, which acts as a type guard&lt;/li&gt;
  &lt;li&gt;Pattern dominance and type exhaustion&lt;/li&gt;
  &lt;li&gt;Partial/Nested/Compound type and/or value checks&lt;/li&gt;
  &lt;li&gt;Shallow/Deep Position-based Destructured matching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not an exhaustive list but more of a general expectation to fulfill the previous advantages we saw.&lt;/p&gt;

&lt;h2 id=&quot;pattern-matching-in-java&quot;&gt;Pattern matching in Java&lt;/h2&gt;

&lt;p&gt;Unfortunately, Java is still a bit behind the curve when it comes to pattern matching.&lt;/p&gt;

&lt;p&gt;But fortunately, we already have most of the building blocks required to achieve most of the features we saw earlier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switch statements&lt;/li&gt;
  &lt;li&gt;Switch expressions (Java 14) — As compared to the switch statements, switch expressions can return a value, have multiple case labels on the same line, and need to be exhaustive. And hence can be used for variable assignments and statements without fallthrough&lt;/li&gt;
  &lt;li&gt;Pattern matching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; (Java 16) — It can now pattern match data types, which means casting after a check is no longer required, and this can be used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, assignments, and returns.&lt;/li&gt;
  &lt;li&gt;Sealed classes (Java 17)&lt;/li&gt;
  &lt;li&gt;Pattern matching for switch (Java 17 preview - JEP 406)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let us look at some examples of what is already possible to do as of Java 17&lt;/p&gt;

&lt;h3 id=&quot;pattern-matching-for-instanceof&quot;&gt;Pattern matching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;From Java 16 onwards, we can do pattern matching using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator. It can be used on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, and we can use it as type guards on variable assignments and returns. This lets us use a variable without further casting after a type check. This is a new syntax added to the language.&lt;/p&gt;

&lt;p&gt;Here we can see pattern matching using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator in action. A type and a variable name follow the operator, and we can access the variable without further casting.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Let pattern matching do the work!&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also use pattern matching as a type guard in returns and variable assignments. See how concise the code is when we do the return using a type guard instead of casting the type.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a variable assignment using a type guard. Again the code is much nicer with pattern matching.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a realistic use case, we could do something like below, when we want to do different logic based on the type, using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator. But that’s a lot of if-else and cognitive load.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;long %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double %f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pattern-matching-for-switch&quot;&gt;Pattern matching for switch&lt;/h3&gt;

&lt;p&gt;But with the new preview feature in Java 17, we can do pattern matching for data types in switch cases as well. For Both, switch statements and switch expressions.&lt;/p&gt;

&lt;p&gt;This will let us rewrite the previous code using a switch expression like below. As you can see, this is also a new syntax. And it’s similar to the one added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;long %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double %f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has Reduced cognitive complexity, and the syntax is closer to most other languages with pattern matching. With this, the compiler can warn us when pattern dominance occurs, as generic types should always come after specific types.&lt;/p&gt;

&lt;p&gt;Since this is a preview feature, the syntax might change in future versions. I hope not, as I find this syntax nice in Java.&lt;/p&gt;

&lt;p&gt;We can also do null checks in these switch cases, which makes pattern matching more useful in the case of Java.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Oops&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;type-guards--pattern-refinement&quot;&gt;Type Guards &amp;amp; pattern refinement&lt;/h3&gt;

&lt;p&gt;As we saw earlier, Type guards are already supported for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator from Java 16 onwards, and Java 17 preview adds that for switch cases as well. This means we can rely on the type guards to refine the patterns further to have conditions, relations, and value checks.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not a string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;                      &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;                            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not a string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While it’s not as flexible as in Rust or OCaml, it’s a good start, in my opinion.&lt;/p&gt;

&lt;h3 id=&quot;pattern-exhaustion-with-sealed-classes&quot;&gt;Pattern exhaustion with Sealed classes&lt;/h3&gt;

&lt;p&gt;We need to understand another new feature in Java 17, Sealed classes, to understand pattern exhaustion.&lt;/p&gt;

&lt;h4 id=&quot;sealed-classes&quot;&gt;Sealed classes&lt;/h4&gt;

&lt;p&gt;A sealed class lets you control which class can extend it. The same applies to sealed interfaces as well.&lt;/p&gt;

&lt;p&gt;Permitted classes can be defined either as simple inner classes or in separate class files using the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permits&lt;/code&gt; keyword.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A sealed class imposes three constraints on its permitted sub-classes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Sealed class and its permitted subclasses must be in the same module or the same package in case of an unnamed module.&lt;/li&gt;
  &lt;li&gt;Every permitted subclass must directly extend the sealed class.&lt;/li&gt;
  &lt;li&gt;Every permitted subclass must use a modifier to describe the propagation of sealing. Allowed modifiers are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-sealed&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Final subclasses cannot further be extended. Hence the class hierarchy ends with them. Records are implicitly final and hence do not need the keyword.&lt;/li&gt;
      &lt;li&gt;A Sealed subclass can further restrict class hierarchy with its own permitted subclasses, and the same three rules apply all over again for them&lt;/li&gt;
      &lt;li&gt;A Non-sealed subclass is a bit different. As the keyword suggests, it reverts to being open for extension by any class and breaks the class hierarchy rules set by the parent sealed class. Non-sealed sub-classes are still valid children and work well with other concepts. We will see that later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;A fun fact, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-sealed&lt;/code&gt; is the first hyphenated keyword in Java.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is how it would look in practice. Sealed classes can also be used with Records. Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; interface is sealed, and it permits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeirdShape&lt;/code&gt; as subclasses.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle&lt;/code&gt; is implicitly final as it’s a record. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square&lt;/code&gt; is declared as final. And hence both cannot be extended further, and their hierarchy ends here.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; is declared as sealed and permits only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransparentRectangle&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilledRectangle&lt;/code&gt; as subclasses. Hence Rectangle’s class hierarchy can extend further, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransparentRectangle&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilledRectangle&lt;/code&gt; can even define their own hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeirdShape&lt;/code&gt; is declared as non-sealed and hence can be extended by any other class or record. Here the class hierarchy is wide open, and subclasses of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeirdClass&lt;/code&gt; do not have to follow the rules of a sealed class. All instances of subclasses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeirdShape&lt;/code&gt; will also be an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeirdShape,&lt;/code&gt; and hence any code that checks for exhaustiveness of subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; will still be valid.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeirdShape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransparentRectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilledRectangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeirdShape&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A sealed class can be abstract and can have abstract members, and similarly, sealed interfaces can have default implementations and so on. But abstract subclasses should be sealed or non-sealed and not final.&lt;/p&gt;

&lt;p&gt;Extending a non-permitted class with a sealed class will be a compile-time error.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another fun fact: A combination of sealed classes and records is nothing but algebraic data types. (type formed by combining others, ex, Tuples, Records, unions)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;pattern-exhaustion&quot;&gt;Pattern exhaustion&lt;/h4&gt;

&lt;p&gt;Remember pattern exhaustion we talked about? The java compiler cannot check for all possible variations for normal classes and hence would require us to add a default case to avoid missing paths in a switch expression, as switch expressions do not fall through and must be exhaustive in Java. That does not apply to switch statements as we can choose not to have a default case for them as they fall through.&lt;/p&gt;

&lt;p&gt;But with sealed classes, the compiler knows exactly what the expected variants are. We can use this for exhaustive pattern matching. In that case, the compiler will warn when we miss a variant in the check without adding a default case. This is a much less error-prone and clearer approach. Even if the subclasses are non-sealed, the compiler will still do the exhaustiveness check.&lt;/p&gt;

&lt;p&gt;See this example; if we use the same sealed classes we saw earlier in the first sample, we will get a compile-time error as we are not checking all variants of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt;, and there is no default case. In the second example, however, there is no error even without a default case as the compiler knows all possible variants of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; have been accounted for. If we remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed&lt;/code&gt; keyword for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt;, then the second sample will have the same error as there is no default case, and the compiler doesn’t know about all variants of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// this will be &apos;switch&apos; expression does not cover all possible input values error&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeirdShape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// still exhaustive&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// no default needed!&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;partial-patterns-and-destructing&quot;&gt;Partial patterns and destructing&lt;/h3&gt;

&lt;p&gt;There is a candidate feature to add preview for destructing/deconstruction syntax for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator, so logically at some point, that should extend to the switch syntax as well. There are also talks about improving the feature further to add support for primitives in switch case patterns and to declare how it should be deconstructed at the class level so that normal classes can also be deconstructed.&lt;/p&gt;

&lt;h4 id=&quot;record-patterns--array-patterns-preview---jep-405&quot;&gt;Record Patterns &amp;amp; Array Patterns (Preview - JEP 405)&lt;/h4&gt;

&lt;p&gt;So far, the only solid thing is the &lt;a href=&quot;https://openjdk.java.net/jeps/405&quot;&gt;candidate for deconstruction in instanceof operator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this proposal, we should be able to deconstruct Records and Arrays. This is closer to how it works in Rust, for example. Look at how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; is deconstructed to its members, and we can directly use the members with type guard&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deconstruction can be nested as well but doesn’t have any facility for ignoring members like in other languages yet.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColoredPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColoredPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Array deconstruction is also proposed, and syntax is a bit similar to array deconstruction in JavaScript. Thankfully at least elements at the end can be ignored in this case; it would be pretty useless otherwise 😉&lt;/p&gt;

&lt;p&gt;See how the string array is deconstructed to the first two elements with the rest ignored. The syntax is closer to the new array syntax as well.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printFirstTwoStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}){&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nested deconstruction is also possible for a mix of arrays and records. See how an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Points&lt;/code&gt; are deconstructed here. And yes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; should work instead of type as well.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printSumOfFirstTwoXCoords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, it’s a baby step and not as powerful as deconstruction in Rust or JS, but I hope we get there, and even this baby step would make pattern matching much more powerful.&lt;/p&gt;

&lt;p&gt;Hopefully, this would be extended to switch as well. That would make pattern matching in Java closer to complete, with only normal classes remaining to be accounted for. If the normal classes can specify how they should be deconstructed, that issue will be solved, and we will have powerful pattern matching in Java.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So based on what we saw so far, the state of pattern matching in Java is as below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enum matching in switch statements ✅&lt;/li&gt;
  &lt;li&gt;Match type/value in switch statements ✅&lt;/li&gt;
  &lt;li&gt;Match type/value in if statements ✅&lt;/li&gt;
  &lt;li&gt;Pattern matched variable assignments ✅&lt;/li&gt;
  &lt;li&gt;Null checks ✅&lt;/li&gt;
  &lt;li&gt;Type guards ✅&lt;/li&gt;
  &lt;li&gt;Refined patterns ✅&lt;/li&gt;
  &lt;li&gt;Pattern dominance and type exhaustion 🆗&lt;/li&gt;
  &lt;li&gt;Partial/Nested/Compound type and/or value checks 🆗&lt;/li&gt;
  &lt;li&gt;Shallow/Deep Position-based Destructured matching 🆗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the basic requirements are met with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator pattern matching, and the Java 17 preview makes many other features possible. Of course, type exhaustion only works for sealed classes, and refined patterns are still quite basic, but the majority of the features for proper pattern matching are already available with the preview.&lt;/p&gt;

&lt;p&gt;To summarize, these are the current and future limitations as far as we can see&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JDK 17 preview&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No deconstruction&lt;/li&gt;
  &lt;li&gt;No nested patterns&lt;/li&gt;
  &lt;li&gt;Type exhaustion is only for sealed classes and enums&lt;/li&gt;
  &lt;li&gt;Pattern refinement is limited&lt;/li&gt;
  &lt;li&gt;Still a preview feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JDK 18+ (maybe)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No deconstruction for classes and in switch cases&lt;/li&gt;
  &lt;li&gt;No nested patterns for classes and in switch cases&lt;/li&gt;
  &lt;li&gt;Type exhaustion is only for sealed classes and enums&lt;/li&gt;
  &lt;li&gt;No feature for ignoring don’t-care patterns during deconstruction&lt;/li&gt;
  &lt;li&gt;No named patterns&lt;/li&gt;
  &lt;li&gt;Still a preview feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a future version of Java, some of these limitations might be removed, at least for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; operator.
We probably would still have to wait a few years before we can actually start using full-fledged pattern matching in production. I’ll update this post when more features are released.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Meme from &lt;a href=&quot;https://makeameme.org/meme/patterns-patterns-everywhere-5c0a75&quot;&gt;makeameme.org&lt;/a&gt;&lt;/p&gt;
</content:encoded>
        <media:content url="https://i.imgur.com/DK0pANn.jpeg" medium="image">https://i.imgur.com/DK0pANn.jpeg</media:content>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/state-of-pattern-matching-java/</link>
        <guid isPermaLink="true">https://deepu.tech/state-of-pattern-matching-java/</guid>
        
        <category>java</category>
        
        <category>patternmatching</category>
        
        <category>jdk</category>
        
        <category>openjdk</category>
        
        
      </item>
    
      <item>
        <title>My sleek and modern Linux development machine in 2021</title>
        <description>My 2021 Linux development machine explained | &lt;a href=&quot;https://deepu.tech/my-beautiful-linux-development-environment-2021/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;One of my most popular posts of all time was when I wrote about &lt;a href=&quot;https://deepu.tech/my-beautiful-linux-development-environment/&quot;&gt;my beautiful Linux development machine in 2019&lt;/a&gt;. Since I got a new machine and a new setup, it naturally calls for a follow-up.&lt;/p&gt;

&lt;p&gt;By now, I’m a die-hard Linux user. It’s been five years since I’m using Linux as my primary OS. I would take a Linux machine any day over macOS or Windows. I own a Windows gaming PC and a Macbook pro from work. Still, they are nowhere near the Linux experience, personally for me. My primary driver is my Linux laptop, and I can’t be any happier with it (well, I can, I’ll come to that at the end of the post).&lt;/p&gt;

&lt;p&gt;So a Dell Precision from 2016 was my primary device until last month, and it is still going good. Fedora runs smoothly on it for most parts. There is some minor glitch now and then but nothing that bothers me. What is a Linux experience without glitches, right? 😉&lt;/p&gt;

&lt;p&gt;But that setup is almost five years old now, and sometimes it shows from the increased CPU load and fan noise. Applications like Chrome, Slack, and VSCode aren’t becoming any lighter in CPU and memory usage. So when I had a chance to get a Linux machine from my new job, thank you &lt;a href=&quot;https://www.okta.com/&quot;&gt;Okta&lt;/a&gt;, I went all in and got myself a Dell XPS 15 9510.&lt;/p&gt;

&lt;p&gt;So here I’m detailing essential aspects of my setup and hoping it will inspire more people to use Linux. I also wrote about the &lt;a href=&quot;https://deepu.tech/the-state-of-linux-on-desktops/&quot;&gt;state of Linux on the desktop&lt;/a&gt;. Check it out if you are interested in Linux. You might be surprised.&lt;/p&gt;

&lt;p&gt;So when I was choosing a new laptop, I narrowed my options down to either &lt;a href=&quot;https://www.dell.com/nl-nl/shop/bekijk-alle-laptops-ultrabooks-tablets/nieuw-xps-15/spd/xps-15-9510-laptop/cn95103cc&quot;&gt;Dell XPS 15&lt;/a&gt; or &lt;a href=&quot;https://www.tuxedocomputers.com/en/Linux-Hardware/Linux-Notebooks/15-16-inch/TUXEDO-Book-Pulse-15-Gen1.tuxedo&quot;&gt;Tuxedo Pulse 15&lt;/a&gt;. Form factor, CPU, and memory was the most important factors for me since my work involves working with Docker and Kubernetes, polyglot development and travel. In the end, I chose Dell since Tuxedo had some issues with multiple monitors via USB-C as it didn’t have thunderbolt support.&lt;/p&gt;

&lt;p&gt;This is not just my work laptop; it’s my primary machine for all of the below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java, Rust, JS, TS, Go and web development (and everything in between)&lt;/li&gt;
  &lt;li&gt;Running multiple web applications locally&lt;/li&gt;
  &lt;li&gt;Running Docker containers and local Kubernetes clusters&lt;/li&gt;
  &lt;li&gt;Kubernetes, Terraform, CloudFormation development and deployments&lt;/li&gt;
  &lt;li&gt;VirtualBox for Windows testing and other VM stuff&lt;/li&gt;
  &lt;li&gt;Azure, AWS, and GCP deployments using required CLI tools&lt;/li&gt;
  &lt;li&gt;Heavy browser usage&lt;/li&gt;
  &lt;li&gt;E-mail, chat, and video conferencing&lt;/li&gt;
  &lt;li&gt;Plex media server&lt;/li&gt;
  &lt;li&gt;Writing, presentations, and illustrations&lt;/li&gt;
  &lt;li&gt;YouTube and Social media&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-configuration&quot;&gt;Machine configuration&lt;/h2&gt;

&lt;p&gt;The configuration of the machine is also quite crucial for any development setup.&lt;/p&gt;

&lt;p&gt;I selected a &lt;a href=&quot;https://www.dell.com/nl-nl/shop/bekijk-alle-laptops-ultrabooks-tablets/nieuw-xps-15/spd/xps-15-9510-laptop/cn95103cc&quot;&gt;custom configuration&lt;/a&gt; from Dell to get the best possible setup at that time. It’s not cheap, but my company, &lt;a href=&quot;https://www.okta.com/&quot;&gt;Okta&lt;/a&gt;, provided a handsome budget. But I do think it can be a lot more competitive in pricing like Tuxedo and the like. This, in my opinion, is one of the best Laptops for developers. So here is what I have.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DoyiLTS.png&quot; alt=&quot;Konsole running neofetch&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Processor&lt;/strong&gt;: Intel® Core™ i9-11900H CPU @ 4.9GHz (8 cores, 16 threads)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 64GB, DDR4-3200MHz SDRAM, 2 DIMMS, non-ECC&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HDD&lt;/strong&gt;: 1TB M.2 NVMe SSD&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt;: NVIDIA GeForce RTX 3050Ti with 4 GB GDDR6 memory &amp;amp; Intel® UHD Graphics&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Wireless&lt;/strong&gt;: Killer Wifi 6 (2x2) + BT 5.1&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keyboard&lt;/strong&gt;: English QWERTY US, backlit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Display&lt;/strong&gt;: 15.6” FHD 1920x1080, matte, non-touch&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Battery&lt;/strong&gt;: 6-cell (86Wh)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ports&lt;/strong&gt;: 2 x Thunderbolt 4 USB-C, 1 x USB-C 3.2 Gen2,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/x5A39eu.jpeg&quot; alt=&quot;Work from home setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use the laptop mostly with my home office, which consists of a &lt;a href=&quot;https://iiyama.com/gl_en/products/prolite-xub3493wqsu-b1/&quot;&gt;34 inch&lt;/a&gt; and a &lt;a href=&quot;https://www.msi.com/Business-Productivity-Monitor/PRO-MP271QP&quot;&gt;27 inch&lt;/a&gt; monitor. A &lt;a href=&quot;https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard?variant=31063869718617&quot;&gt;Keychron K2&lt;/a&gt; keyboard, &lt;a href=&quot;https://www.logitech.com/en-us/products/mice/mx-vertical-ergonomic-mouse.910-005447.html&quot;&gt;Logitech MX Vertical&lt;/a&gt; mouse, &lt;a href=&quot;https://www.razer.com/streaming-cameras/razer-kiyo-pro/RZ19-03640100-R3U1&quot;&gt;Razer Kiyo&lt;/a&gt; webcam, &lt;a href=&quot;https://www.elgato.com/en/key-light-air&quot;&gt;Elgato Keylight&lt;/a&gt;, &lt;a href=&quot;https://fifinemicrophone.com/collections/microphones/products/fifine-k780-usb-microphone-kit-with-scissors-arm-stand-shock-mount-and-pop-filter&quot;&gt;Fifine&lt;/a&gt; mic and a &lt;a href=&quot;https://www.dell.com/nl-nl/work/shop/dell-thunderbolt-dock-wd19tbs/apd/210-azbv/pc-accessoires&quot;&gt;Dell Thunderbolt dock&lt;/a&gt; that drives all my peripherals and monitors while powering the laptop all using a single USB-C cable. I have an old Sony Bluetooth headset and a cheap custom amplifier running a pair of old bookshelves and a subwoofer for audio.&lt;/p&gt;

&lt;h2 id=&quot;operating-system-and-desktop-environment&quot;&gt;Operating system and desktop environment&lt;/h2&gt;

&lt;p&gt;Switching to Fedora was a great decision I made sometime in 2017, and I’m so happy with it. Updates are butter smooth. I don’t have to worry about stuff breaking all the time from rolling releases. At the same time, new stuff lands every six months, and packages are updated frequently, keeping everything running smoothly. For a developer, that is an excellent combination, in my opinion. So naturally, I choose to stick to Fedora; why fix something that isn’t broken, right?&lt;/p&gt;

&lt;p&gt;So I’m running Fedora 34. I have been using Gnome for the past five years, but recently KDE caught my eyes, and I decided to give it a shot. So I went with the &lt;a href=&quot;https://spins.fedoraproject.org/kde/&quot;&gt;KDE spin of Fedora&lt;/a&gt;. KDE has been great so far. I love the amount of customization you can do on it, and top of all, it looks super sleek, and there is an excellent selection of themes and styles to choose from. I’m definitely not missing Gnome.&lt;/p&gt;

&lt;p&gt;What good is a desktop without a nice theme, right? KDE has a great collection of themes, and I went with &lt;a href=&quot;https://store.kde.org/p/1464321/&quot;&gt;Ant-Dark&lt;/a&gt; theme for now, and it looks gorgeous with transparency and blur effects. While KDE themes are self-sufficient with icons, cursors, and lock screens, I switched from default icons to icons from &lt;a href=&quot;https://store.kde.org/p/1307867/&quot;&gt;KDE-Story theme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/D5wlea4.png&quot; alt=&quot;KDE Settings for appearance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use many plugins in Gnome, but in KDE, all those came out of the box, like clipboard manager, notepad, system monitor, etc. Another reason I’m enjoying KDE.&lt;/p&gt;

&lt;p&gt;With the new installation, I also went with the BTRFS filesystem, which is fantastic. Snapshots and backups are so fast. Though setting up snapshots and backup was a challenge initially.&lt;/p&gt;

&lt;h2 id=&quot;development-tools&quot;&gt;Development tools&lt;/h2&gt;

&lt;p&gt;These are mostly objective choices and really don’t matter as long as you are comfortable with your chosen tools. Below are my choices for some of the important categories for development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt;: This is one of the most important for a developer. I use &lt;a href=&quot;https://www.zsh.org/&quot;&gt;ZSH&lt;/a&gt; along with the awesome &lt;a href=&quot;https://starship.rs/&quot;&gt;Starship prompt&lt;/a&gt; as my shell. I tried to switch to &lt;a href=&quot;https://fishshell.com/&quot;&gt;Fish&lt;/a&gt;, but it was quite annoying due to its difference with bash/ZSH, and I gave up on it. I went with the default theme and settings from Starship as it was very close to my earlier setup with Oh My ZSH. I also use &lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;zsh-autosuggestions&lt;/a&gt; and &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;zsh-syntax-highlighting&lt;/a&gt; plugins for ZSH and &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; for search.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: What good is a nice shell without a good terminal. Fortunately, the default KDE shell, Konsole, is great, and KDE also has &lt;a href=&quot;https://apps.kde.org/yakuake/&quot;&gt;Yakuake&lt;/a&gt;, which is one of the best terminal applications out there. It has workspaces, tabs, split windows, Quake mode, etc. I mostly use Yakuake, which is bound to &lt;kbd&gt;Ctrl+`&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/S3cpjzW.png&quot; alt=&quot;Yakuake on KDE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDE&lt;/strong&gt;: &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; - My go-to editor. I love it. I use VSCode for web development, Rust, Go, JS development, DevOps, and everything other than JVM languages. A VSCode setup is never complete without some good plugins. &lt;a href=&quot;https://gist.github.com/deepu105/4599d3b381218b9d1a63119fbf9ca537&quot;&gt;Here&lt;/a&gt; are the plugins that I’m using. You can run the script to install those. For Java development, I use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA Ultimate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other notable development tools I use are &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt; for Git repo management, &lt;a href=&quot;https://www.scootersoftware.com&quot;&gt;Beyond Compare&lt;/a&gt; for code comparisons, &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;NVM&lt;/a&gt; for Node.js version management and &lt;a href=&quot;https://sdkman.io&quot;&gt;SDKMan&lt;/a&gt; for JDK version management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Toolchains&lt;/strong&gt;: Node.js and NPM, Rust toolchain, Golang, JVM, Deno, Ruby toolchain, and Python toolchain. I also ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dnf groupinstall &quot;Development Tools&quot; &quot;Development Libraries&quot;&lt;/code&gt; to install the toolchains required for compiling Linux applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: Docker, kubectl, Terraform, k3d, and so on&lt;/p&gt;

&lt;h2 id=&quot;productivity-tools&quot;&gt;Productivity tools&lt;/h2&gt;

&lt;p&gt;Productivity tools are also quite necessary, and below are my choices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browser&lt;/strong&gt;: Google Chrome is my primary browser. I also use Firefox sometimes. I use the &lt;a href=&quot;https://bitwarden.com/&quot;&gt;Bitwarden&lt;/a&gt; plugin for password management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E-mail&lt;/strong&gt;: I use &lt;a href=&quot;https://getmailspring.com/&quot;&gt;Mailspring&lt;/a&gt; as my e-mail client. It’s a fairly decent mail client with nice themes and a simple UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Office suite&lt;/strong&gt;: I mostly use Google Docs, but when I have to work on something on my desktop I use &lt;a href=&quot;https://www.libreoffice.org/&quot;&gt;LibreOffice&lt;/a&gt;, which is a good office suite and even handles Microsoft Office &amp;amp; Keynote formats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;: Of course I use &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt; and for video conference I use &lt;a href=&quot;https://www.zoom.us/&quot;&gt;Zoom&lt;/a&gt;. I also have Telegram and Signal installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screen capture&lt;/strong&gt;: I use this nifty tool called &lt;a href=&quot;https://github.com/phw/peek&quot;&gt;Peek&lt;/a&gt; for screen recording and &lt;a href=&quot;https://github.com/flameshot-org/flameshot&quot;&gt;Flameshot&lt;/a&gt; for screenshots.&lt;/p&gt;

&lt;h2 id=&quot;streaming--media&quot;&gt;Streaming &amp;amp; Media&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Streaming&lt;/strong&gt;: I think &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS Studio&lt;/a&gt; is the default choice here and is one of the best options for streaming and screen recording.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image editing and processing&lt;/strong&gt;: &lt;a href=&quot;https://www.gimp.org/&quot;&gt;Gimp&lt;/a&gt; for photo editing, &lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; for vector editing, and &lt;a href=&quot;https://app.diagrams.net/&quot;&gt;Draw.io&lt;/a&gt; for illustrations. KDE also has some default apps for photo management, which is quite good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: &lt;a href=&quot;https://kdenlive.org/&quot;&gt;Kdenlive&lt;/a&gt; is a great choice for video editing on Linux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video player&lt;/strong&gt;: &lt;a href=&quot;https://www.smplayer.info/en/downloads&quot;&gt;SMPlayer&lt;/a&gt; is my go-to video player.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many other small and nifty utilities that I use; most are command-line utilities. There are some notable mentions like &lt;a href=&quot;https://github.com/teejee2008/timeshift&quot;&gt;Timeshift&lt;/a&gt;, which is nice for backing up your machine.&lt;/p&gt;

&lt;p&gt;Of course, not everything is perfect in the Linux world, but it is the same with every OS from my experience. Before switching to Linux, I was a long-time Windows user, and last year, I spent more than a year using macOS now and then, so issues are everywhere. So like every Linux user, I have from time to time messed things up(With great power comes great responsibility, Peter). There are some minor annoyances with this new setup, but there is nothing that bothers me much. Some of the most annoying issues I have currently are below, and I’ll probably fix them if it bothers me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New Intel platforms do not support deep sleep, and hence laptop does lose power over time, even in Idle.&lt;/li&gt;
  &lt;li&gt;Hibernation doesn’t work out of the box. It’s easy to fix, but at the moment doesn’t bother me.&lt;/li&gt;
  &lt;li&gt;Some random crashes from KDE settings. Not a big deal as it’s a rare occurrence.&lt;/li&gt;
  &lt;li&gt;KDE remembers open apps on a restart, but when on multiple monitors, it doesn’t remember which screen it was in.&lt;/li&gt;
  &lt;li&gt;Biometrics is a bit tricky in Linux. The built-in fingerprint sensor doesn’t have a proper driver for Fedora yet, there is one for Ubuntu, and I probably can &lt;a href=&quot;https://aboutcher.co.uk/2020/10/goodix-fingerprint-reader-on-fedora-linux/&quot;&gt;get it working&lt;/a&gt;. For face recognition, there is &lt;a href=&quot;https://github.com/boltgolt/howdy&quot;&gt;Howdy&lt;/a&gt;, but for some reason, I couldn’t get it working and hence probably need to &lt;a href=&quot;https://github.com/boltgolt/howdy/issues/604&quot;&gt;do some digging&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find this inspires you to give Linux a chance. If you have any questions, please ask in the comments.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</content:encoded>
        <media:content url="https://i.imgur.com/LIn8i4h.jpeg" medium="image">https://i.imgur.com/LIn8i4h.jpeg</media:content>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0100</pubDate>
        <link>https://deepu.tech/my-beautiful-linux-development-environment-2021/</link>
        <guid isPermaLink="true">https://deepu.tech/my-beautiful-linux-development-environment-2021/</guid>
        
        <category>linux</category>
        
        <category>fedora</category>
        
        <category>development</category>
        
        <category>kde</category>
        
        
      </item>
    
      <item>
        <title>What is Developer Experience and why should we care?</title>
        <description>Let&apos;s bust some myths around developer experience and see why it&apos;s important. | &lt;a href=&quot;https://deepu.tech/what-is-developer-experience-and-why-care/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;Information Technology (IT) is undoubtedly one of the most important industries today and one that is ever-growing. Every company is becoming an IT company these days. From Taxis to food delivery to banking, every industry is dominated by companies that are IT companies first and domain second. With that growth, the demand for software and tools used by other developers also grows.&lt;/p&gt;

&lt;p&gt;As an industry it took us some time to realize the importance of user experience (UX), you will understand what I’m talking about if you have tried using the internet or any software before the 2000s, but fortunately, we took notice, and today there are entire departments dedicated to user research and UX in software development.&lt;/p&gt;

&lt;p&gt;User experience matters for any software, but if your primary consumers are developers, then there is something else that matters more than UX. Its developer experience (DX) as developers make IT possible.&lt;/p&gt;

&lt;h2 id=&quot;what-is-developer-experience&quot;&gt;What is Developer Experience?&lt;/h2&gt;

&lt;p&gt;It is the overall feeling that a developer gets when using a technical product in her/his development workflow. It is akin to UX but from a developer’s perspective. Let’s take an example for the sake of non-developer folks out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EB23Cv3.png&quot; alt=&quot;What is Developer experience&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say you are building a cool and fancy product that lets developers add an image gallery to their applications, as part of the product you provide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an API, to get random optimized images from your service;&lt;/li&gt;
  &lt;li&gt;a JS SDK to add this easily on WordPress sites;&lt;/li&gt;
  &lt;li&gt;a web application to manage the images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now for a developer who would use this product the DX is going to be the sum of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The experience using the API, like:
    &lt;ul&gt;
      &lt;li&gt;how easy it was to onboard&lt;/li&gt;
      &lt;li&gt;how easy it is to integrate into their app?&lt;/li&gt;
      &lt;li&gt;simplicity of the API and the resulting code&lt;/li&gt;
      &lt;li&gt;learning curve of the API&lt;/li&gt;
      &lt;li&gt;how informative are error messages?&lt;/li&gt;
      &lt;li&gt;does it follow known standards and structure?&lt;/li&gt;
      &lt;li&gt;how easy it is to debug.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Performance of the API.&lt;/li&gt;
  &lt;li&gt;Documentation of the API and product.&lt;/li&gt;
  &lt;li&gt;The ease of use of the JS SDK if they are using it.&lt;/li&gt;
  &lt;li&gt;The user experience of the web app when managing images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this experience determines if the developer is going to consider using your product for the next project or not.&lt;/p&gt;

&lt;p&gt;We could also loosely measure DX as the inverse of the amount of frustration a developer has when using a product. Sometimes these frustrations could be outside of your control but regardless it is going to affect the DX as after all we are human and our emotions and feelings bound us.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Of course other factors like features, pricing, sales, marketing, and so on will get you through the door, but good DX is what will keep you in the room.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, there are more things that can be done in the above example to make DX even better, like providing example applications, video tutorials, blog posts showing various use cases, CLI tools for debugging, and so on.&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-care-about-developer-experience&quot;&gt;Why should you care about Developer Experience?&lt;/h2&gt;

&lt;p&gt;You should care about the DX of your product for the same reasons you care about the UX and some more. If you are a developer, just think of what kind of experience you would want when using a similar product. A good DX also shows empathy on your part for your primary users.&lt;/p&gt;

&lt;p&gt;Developers are a very opinionated bunch. We love our opinions and we love to defend our favorite language, technology, and tools. Heck, we are even ready to go to war over something as trivial as &lt;a href=&quot;https://www.reddit.com/r/programming/comments/p1j1c/tabs_vs_spaces_vs_both/&quot;&gt;tabs vs spaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if your product has great DX the developers using it will love it and will evangelize and defend your product to the death. You might even gain a community of ardent supporters for your product that no amount of marketing can get you.&lt;/p&gt;

&lt;p&gt;But if the DX is bad, they are going to badmouth your product. If you are a developer, I think you know what I’m talking about and I’m pretty sure you have done this a lot.&lt;/p&gt;

&lt;p&gt;Another reason for focusing on DX is that it will make marketing and sales much easier as you have less friction with your end-users and fewer things that you need to convince them about.&lt;/p&gt;

&lt;p&gt;The recent surge in the interest for developer advocacy has also helped to bring to the limelight the importance of DX and without good DX there is not much you can do about developer advocacy and evangelism.&lt;/p&gt;

&lt;h2 id=&quot;how-can-we-have-a-great-developer-experience&quot;&gt;How can we have a great Developer Experience?&lt;/h2&gt;

&lt;p&gt;A product with great DX helps a developer to get up and running quickly and reach her/his goal with minimal frustrations.&lt;/p&gt;

&lt;p&gt;So let’s see what are some of the common things that could help make great DX. Please note that this is not an exhaustive list and there are many more things that could help, depending on the specific product/use case.&lt;/p&gt;

&lt;h3 id=&quot;if-you-are-building-apis&quot;&gt;If you are building APIs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Stick to known and highly adopted standards and conventions. Do not reinvent the wheel or try to come up with new fancy conventions as it will increase the learning curve and make it harder for developers to onboard.&lt;/li&gt;
  &lt;li&gt;Provide good error handling. Adopt something like &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7807&quot;&gt;RFC 7807&lt;/a&gt; to provide a consistent and easy-to-use error handling for your API. Errors are unavoidable but making developers scratch their heads when it happens is avoidable to an extend.&lt;/li&gt;
  &lt;li&gt;Provide consistent and easy-to-use documentation. Provide an &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI&lt;/a&gt; or &lt;a href=&quot;http://raml.org/&quot;&gt;RAML&lt;/a&gt; file that describes your API and the endpoints. Also, provide easy-to-use interactive online API documentation like &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger&lt;/a&gt; if possible.&lt;/li&gt;
  &lt;li&gt;Provide SDKs and libraries for most popular languages and frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;if-you-are-building-development-toolsproducts&quot;&gt;If you are building development tools/products&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Good UX, which is tailored for developers. Like providing high contrast options. Good keyboard navigation, consistent with an industry standard.&lt;/li&gt;
  &lt;li&gt;Customizability, did I mention developers are an opinionated bunch?&lt;/li&gt;
  &lt;li&gt;Easy to install on different platforms. Support different OSes. Provide multiple installation methods, especially, support the most popular installation method/package manager used by the ecosystem relevant to your product.&lt;/li&gt;
  &lt;li&gt;Easy-to-use and well documented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;if-you-are-building-sdkslibrariesframeworks&quot;&gt;If you are building SDKs/Libraries/Frameworks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Consistency and following industry standards and conventions. Avoid reinventing the wheel without a solid reason.&lt;/li&gt;
  &lt;li&gt;Play well with other SDKs/Frameworks in the ecosystem.&lt;/li&gt;
  &lt;li&gt;Provide inline code documentation wherever possible. Developers appreciate not requiring to leave their IDE.&lt;/li&gt;
  &lt;li&gt;Provide great documentation, examples, tutorials, interactive learning, and so on.&lt;/li&gt;
  &lt;li&gt;Easy to use error reporting system.&lt;/li&gt;
  &lt;li&gt;Open source when possible.&lt;/li&gt;
  &lt;li&gt;Avoid gatekeeping as much as possible. No registration-only webinars and no white papers that ask for my mother’s favorite color.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;In general, always ask this question, how can my product make a developer’s day better?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure the product does exactly what it claims to do.&lt;/li&gt;
  &lt;li&gt;Make sure the product is reliable and performant otherwise good DX will not cut it.&lt;/li&gt;
  &lt;li&gt;Focus on easy-to-use self-service rather than traditional support channels. Developers hate bureaucratic processes. Provide transparent support channels for those edge cases but most developers would prefer self-service if available rather than talking to a support person.&lt;/li&gt;
  &lt;li&gt;Simple onboarding. Avoid having to go through sales or other channels just to get started with development or for trying out your product.&lt;/li&gt;
  &lt;li&gt;Provide modern tooling or make your stuff compatible with modern tooling. Nobody wants to download and set up something from the 80s to run your software.&lt;/li&gt;
  &lt;li&gt;Make trying out your product as easy as possible.&lt;/li&gt;
  &lt;li&gt;Make documentation easy to find and navigate. Avoid having to jump through hoops to find documentation.&lt;/li&gt;
  &lt;li&gt;Make developer resources easy to find. Make a developer-focused section on your company website as a landing point for developer resources.&lt;/li&gt;
  &lt;li&gt;Avoid jargon-rich fancy marketing as most of us can see right through it. Keep it simple and to the point.&lt;/li&gt;
  &lt;li&gt;Build developer advocacy rather than technical evangelism.&lt;/li&gt;
  &lt;li&gt;Build a community around your product.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We are slowly transitioning to an era where the importance of developers is being recognized and their influence on decision making is no longer something companies can take for granted.&lt;/p&gt;

&lt;p&gt;This is very clear from the fact that more and more companies are building developer relationship teams and hiring developer advocates rather than marketing evangelists.&lt;/p&gt;

&lt;p&gt;In this crowded space, being developer-focused used to be a differentiator but things are going towards the same situation that happened with UX where it became a must have rather than a good to have.&lt;/p&gt;

&lt;p&gt;The same will happen for DX as well and if you are building a product that is going to be used by developers, then you should start caring. Building developer experience and developer advocacy don’t happen overnight.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Photo by &lt;a href=&quot;https://unsplash.com/@nublson&quot;&gt;Nubelson Fernandes&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/developer&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</content:encoded>
        <media:content url="https://i.imgur.com/NDimrjE.jpeg" medium="image">https://i.imgur.com/NDimrjE.jpeg</media:content>
        <pubDate>Fri, 16 Jul 2021 00:00:00 +0200</pubDate>
        <link>https://deepu.tech/what-is-developer-experience-and-why-care/</link>
        <guid isPermaLink="true">https://deepu.tech/what-is-developer-experience-and-why-care/</guid>
        
        <category>devrel</category>
        
        <category>developerexperience</category>
        
        <category>engineering</category>
        
        <category>discuss</category>
        
        
      </item>
    
      <item>
        <title>The programming languages I like and why I like them</title>
        <description>Being a polyglot developer, there would be some language you like over others and here are mine. | &lt;a href=&quot;https://deepu.tech/languages-i-like-and-why/&quot;&gt;Read the full article on deepu.tech&lt;/a&gt;</description>
        <author>Deepu K Sasidharan</author>
        <content:encoded>&lt;p&gt;Being a polyglot developer is fun. You are not married to a single language/ecosystem and you have a diverse tool-belt to choose from based on the issue at hand. But still, you are going to have favorites based on your experience with different languages and their ecosystem.&lt;/p&gt;

&lt;p&gt;In my career, spanning 11+ years, I have worked with many programming languages. The first programming language I encountered was Basic when I was in school, but I won’t count that since I didn’t pay any attention and I didn’t understand it back then.&lt;/p&gt;

&lt;p&gt;Later when I was in college I had a mandatory computer science class, I was doing Electrical and Electronic Engineering, and there I first came across C, C++, and Java. But again It was just basics and I wasn’t very interested and I just studied enough to clear the paper.&lt;/p&gt;

&lt;p&gt;Later, I was running a blog about motorcycles and I started dabbling with WordPress, Flash, ActionScript, and JavaScript.&lt;/p&gt;

&lt;p&gt;The first programming language I actually learned with an interest was &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;, It was a training language used in my first job as an IT Intern/Trainee and that got me hooked and in few months I started learning Java and JavaScript.&lt;/p&gt;

&lt;p&gt;I became quite good at Java and JS and really was enjoying working with those and If you have asked me back then, I would have said that Java and JS were the greatest languages out there.&lt;/p&gt;

&lt;p&gt;So for a pretty good part of my career, I was coding in Java and JavaScript and later TypeScript. I did work with a bit of Groovy, Python, and Scala but I didn’t like those languages much and I had no interest in learning any new languages at that point.&lt;/p&gt;

&lt;p&gt;A few years ago when Golang was all the rage, I moved to a project that was built in Go and hence started looking into Go. It was extremely easy to learn and I really liked working with it (for a while).&lt;/p&gt;

&lt;p&gt;Rust was quite new at that point and I wanted to try it out but got around to it only a year later and I was in love with it.&lt;/p&gt;

&lt;p&gt;In the past two years, I also worked with Kotlin, PHP, Ruby, and C# as well occasionally. But I wasn’t very impressed with Ruby and PHP.&lt;/p&gt;

&lt;p&gt;So without further adieu, these are my favorite programming languages in order.&lt;/p&gt;

&lt;h1 id=&quot;1-rust&quot;&gt;1. Rust&lt;/h1&gt;

&lt;p&gt;Rust is currently my most favorite language. It’s so much fun to work with and I love the challenge of rethinking how you write code. You know, as they say, it sparks joy when you work with it. Rust is truly a modern and powerful programming language.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/java?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#java&lt;/a&gt;: I&amp;#39;ll provide you memory safety but you must pay performance penalty for abstractions and the runtime&lt;a href=&quot;https://twitter.com/hashtag/C?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#C&lt;/a&gt;++: I&amp;#39;ll provide you zero cost abstractions, but you must pay with memory safety&lt;a href=&quot;https://twitter.com/hashtag/Rust?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Rust&lt;/a&gt;: hold my 🍺&lt;/p&gt;&amp;mdash; @deepu105@mastodon.social (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1413259371472109573?ref_src=twsrc%5Etfw&quot;&gt;July 8, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Rust would be my go-to for systems programming, embedded, CLIs, OS tools, WebAssembly, and so on. I guess the only place I won’t use Rust would be serious monolithic web application development as the ecosystem is not mature for that yet.&lt;/p&gt;

&lt;p&gt;I wrote in detail about what I like and dislike about Rust in &lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/&quot;&gt;this post&lt;/a&gt;, but I’ll summarize it here for the casual skimmers.&lt;/p&gt;

&lt;h2 id=&quot;-likes&quot;&gt;😍 Likes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/#safety&quot;&gt;&lt;strong&gt;Safe by default&lt;/strong&gt;&lt;/a&gt;: Rust is memory safe, thread-safe, type-safe, and null safe&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/#zero-cost-abstractions&quot;&gt;&lt;strong&gt;Zero cost abstractions&lt;/strong&gt;&lt;/a&gt;: Write in any programming style without worrying about the added performance penalty&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/#fearless-concurrency&quot;&gt;&lt;strong&gt;Awesome concurrency&lt;/strong&gt;&lt;/a&gt;: Great support for multi-threading, parallelism, and asynchronous programming&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/my-second-impression-of-rust/#community-tooling--ecosystem&quot;&gt;&lt;strong&gt;Great tooling out of the box&lt;/strong&gt;&lt;/a&gt;: Cargo, Clippy, Rustfmt, and so on. It’s the best tooling ecosystem I have come across. Testing, building, bootstrapping, benchmarking, linting and more included out of the box.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Immutable by default&lt;/strong&gt;: You need to declare mutable operations explicitly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Built-in functional programming abstractions&lt;/strong&gt;: Monad like iterators, optional, chaining, and so on&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/#typesofmacrosinrust&quot;&gt;&lt;strong&gt;Macros&lt;/strong&gt;&lt;/a&gt;: Powerful metaprogramming that can be used to define custom language features, code reusability, and so on&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Excellent community&lt;/strong&gt;: Fast-growing, active, and really supportive community&lt;/li&gt;
  &lt;li&gt;Superfast, as fast as or sometimes even faster than C/C++&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No heavy runtime&lt;/strong&gt;: No garbage collection and so on. There is a very small runtime for panics and stuff, but IMO it’s negligible&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Excellent language features&lt;/strong&gt;: Pattern matching, generics, iterators, traits, expressions, and so on&lt;/li&gt;
  &lt;li&gt;Hands down the best compiler out there. You have to try it to appreciate it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fast growing and being widely adopted&lt;/strong&gt;: Rust is going places. There are a lot of big names(Google, Microsoft, AWS, Apple, and so on) adopting it and hence cementing its place. It’s also finding footing outside of systems programming like embedded, web assembly, web development, game development, and so on. Once the ecosystems for different use cases mature, I see great potential for Rust to be a great general-purpose language without any major compromise.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Native images&lt;/strong&gt;: It’s so easy to build native images with Rust, no special setup required. Cargo supports building for your favorite platform out of the box.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-dislikes&quot;&gt;😩 Dislikes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/first-impression-of-rust/#complexity&quot;&gt;&lt;strong&gt;Complexity&lt;/strong&gt;&lt;/a&gt;: Being an amalgamation of many languages, Rust does feel more complex than many other languages. I especially would have preferred to not have multiple ways to do the same thing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Learning curve&lt;/strong&gt;: Rust is not the easiest language to learn, especially if you are a beginner or if you are used to working only in one language like Java, C#, or Python. But if you are polyglot and already familiar with a few languages like C/C++, Java, TS, and Go, you will feel quite at home with Rust. There are some advanced concepts like borrowing and lifetimes that take some getting used to and practice to grasp.&lt;/li&gt;
  &lt;li&gt;Ecosystem is not mature enough for many use cases. I would love to use Rust for web application development but the ecosystem for that is still very young and you are gonna have a hard time compared to something like Java or C#&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-java&quot;&gt;2. Java&lt;/h1&gt;

&lt;p&gt;Java isn’t cool like Rust or feature-rich like JavaScript but it makes up for all that by having one of the most stable, battle-tested, and rich ecosystems.&lt;/p&gt;

&lt;p&gt;So if I would start my own company with a web application as the product, I would 100% go with JVM on the backend with either Java or Kotlin, and of course I will build it using &lt;a href=&quot;https://www.jhipster.tech/&quot;&gt;JHipster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like Java, it’s hard not to like Kotlin. It feels like a modern version of Java and building Android apps using Kotlin was a nice experience. Unlike Scala, Kotlin doesn’t go overboard with all the complexity and implicit stuff.&lt;/p&gt;

&lt;p&gt;I might choose Kotlin over Java if building a new web app and if the team has experience with Kotlin.&lt;/p&gt;

&lt;p&gt;Also, Java is close to my heart as it’s the programming language that jump-started my career.&lt;/p&gt;

&lt;p&gt;Here is what I like and dislike about Java&lt;/p&gt;

&lt;h2 id=&quot;-likes-1&quot;&gt;😍 Likes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ecosystem&lt;/strong&gt;: The biggest strength of Java is its ecosystem. There are great frameworks and libraries for everything you can think of and most of these solutions are extremely stable with a lot of community and support. In reality, the ecosystem is whats keeping Java popular and growing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Experienced community&lt;/strong&gt;: Java has a very mature and experienced community so even if you are a beginner there is a lot of resources to help you&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Great tooling&lt;/strong&gt;: There are a lot of great tools out there for Java. IDEs like IntelliJ, Eclipse, NetBeans offer some of the best developer experiences, and build tools like Gradle and Maven are so powerful and feature-rich. There are also profilers, linters, and so on.&lt;/li&gt;
  &lt;li&gt;Built-in &lt;a href=&quot;https://deepu.tech/functional-programming-in-java-for-beginners/&quot;&gt;functional programming abstractions&lt;/a&gt;: Monad like iterators, streams, optional, functional interfaces, and so on&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fairly easy to learn&lt;/strong&gt;: Java is not very complex and hence is fairly easy to learn and get started even with its boilerplate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-dislikes-1&quot;&gt;😩 Dislikes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Boilerplate&lt;/strong&gt;: Java needs too much boilerplate. There is no nice way to say this. Compared to other languages in its league, Java feels too verbose. Lambdas have made it more digestible but there are other JVM languages like Kotlin or Scala that have got this part right. I really wish Java gets there one day where you don’t have to write 20 lines of code to read a file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Not so modern&lt;/strong&gt;: Language features in Java are, let’s just say it doesn’t spark joy, it’s improving but if you are used to few other languages, then there is a lot to wish for, and compared to its peers Java feels old even though its just as old as JS, Ruby or Python&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Baggage&lt;/strong&gt;: Java has great backward compatibility but that also means baggage. there is a lot of such baggage in Java and it’s holding the language back in my humble opinion.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Virtual machine&lt;/strong&gt;: JVM was a great idea when Java was introduced as portability was not easy back then but in today’s IT landscape containers and native images have made portability easy and that makes a Java Virtual Machine redundant. JVM still provides a lot of valuable features but it also takes up resources and space whereas languages like Go or Rust can just build tiny native binaries that can be deployed using docker to get better performance with less resource usage than a Java app running on JVM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-typescriptjavascript&quot;&gt;3. TypeScript/JavaScript&lt;/h1&gt;

&lt;p&gt;Most Java developers hate JavaScript but I have a &lt;a href=&quot;https://deepu.tech/reflections-on-javascript/&quot;&gt;love-hate relationship&lt;/a&gt; with it. JavaScript is one of the quirkiest languages around and like it or not it’s the de-facto for the web and it gets the job done.&lt;/p&gt;

&lt;p&gt;I like TypeScript a lot more than JavaScript and find it way nicer to work with than JS. So TS and by extension JS would tie with Java for the second spot for me.&lt;/p&gt;

&lt;p&gt;TS/JS is still my go-to for quick scripting and building client-side apps and mobile apps (ReactNative/PWA)&lt;/p&gt;

&lt;p&gt;I wrote in detail about what I like and dislike about JS in this post, here is the summary&lt;/p&gt;

&lt;h2 id=&quot;-likes-2&quot;&gt;😍 Likes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#dynamic--extremely-flexible&quot;&gt;&lt;strong&gt;Flexible&lt;/strong&gt;&lt;/a&gt;: The dynamic nature of JS/TS makes it extremely flexible and powerful. It’s also very forgiving language. If you know what you are doing, there is literally nothing you cant get done. Of course, the flexibility comes with its own price.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#biggest-community&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/a&gt;: JavaScript has the biggest community among programming languages. It’s active, mature, and thriving. It’s a huge strength as it helps beginners and experts alike in solving problems and improving the ecosystem on the whole.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ecosystem&lt;/strong&gt;: JS has a huge ecosystem with a lot of libraries and frameworks. You will find anything you could imagine as a library. The ecosystem is so big that it has started to become an issue in terms of “yet another framework syndrome”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Asynchronous programming&lt;/strong&gt;: JS has one of the best ecosystems for asynchronous programming. It’s so easy to write async code with Promises and async/await and it has become the de-facto way of programming in JS these days.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Great tooling&lt;/strong&gt;: JS has great tooling, thanks to NodeJS and its ecosystem. IDEs like VS Code, Atom, Webstorm, and so on provide great JS support. There are also so many wonderful tools like Webpack, Rollup, Jest, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/functional-programming-in-typescript/&quot;&gt;&lt;strong&gt;Functional programming&lt;/strong&gt;&lt;/a&gt;: JS is multi-paradigm and has a lot of support for functional programming. It’s a great fit for functional programming.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#beginner-friendly-but-also-powerful&quot;&gt;&lt;strong&gt;Easy to learn&lt;/strong&gt;&lt;/a&gt;: JS is a simple language to learn and get started. It’s one of the most beginner-friendly languages and communities out there. Of course, there is complex stuff in JS but you don’t need to know that to get started.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;: NodeJS was the best thing to happen for software development. It not just revolutionized the JS world but also inspired other languages to take note and be more developer-friendly and build easy-to-use tooling and ecosystem. You can see this inspiration in Rust, Golang, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: TS is another best thing that happened to JS. It provides an answer to a lot of JS issues that bother people and makes it possible to use JS in a more developer-friendly way on a huge codebase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-dislikes-2&quot;&gt;😩 Dislikes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#fragmentation-browser-implementations-version-compatibility&quot;&gt;&lt;strong&gt;Fragmentation&lt;/strong&gt;&lt;/a&gt;: This is the biggest issue with JS. There are standards and there is vendors and that’s the perfect recipe for disaster. Most of the time a JS developer spends used to be to make it work across different browsers and platforms. The demise of IE has made this better but hey I heard Safari is the next IE so there is that.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#error-prone-a-side-effect-of-flexibility&quot;&gt;&lt;strong&gt;Error-prone&lt;/strong&gt;&lt;/a&gt;: This is the side effect of being too flexible. JS code is extremely error-prone and unmanageable in huge code bases. TypeScript makes this much much better but still, it’s so easy to shoot in your own foot with JS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflections-on-javascript/#yet-another-framework-syndrome&quot;&gt;&lt;strong&gt;Framework overload&lt;/strong&gt;&lt;/a&gt;: Too many frameworks for the same thing, too many libraries for the same thing, and libraries for doing extremely trivial stuff like left-padding :( Competition is good but IMO what we have in the JS ecosystem is just too much. It causes mental drain and unnecessary fragmentation in the community.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Over-engineering in the ecosystem&lt;/strong&gt;: I have been doing JS for over 11 years now and I’m noticing a clear trend of over-engineering in the ecosystem. Look at the JS build tooling for example it has been over-engineered to the extend that setting that up feels like a project in itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-go&quot;&gt;4. Go&lt;/h1&gt;

&lt;p&gt;Go is the simplest language I have worked with and the easiest to learn. I like Golang for quickly putting something together and Go code is quite easy to read.&lt;/p&gt;

&lt;p&gt;But I would choose Rust over go for large codebase since Go becomes annoying due to its limited features after a while especially on large codebases. IMO go is still ideal for building small system utilities and microservices.&lt;/p&gt;

&lt;p&gt;I wrote in detail about what I like and dislike about Go in &lt;a href=&quot;https://deepu.tech/reflection-on-golang/&quot;&gt;this post&lt;/a&gt;, here is the summary&lt;/p&gt;

&lt;h2 id=&quot;-likes-3&quot;&gt;😍 Likes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflection-on-golang/#simplicity&quot;&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;&lt;/a&gt;: Go is extremely simple. You could technically learn it in a day or two. It’s easy to get started and be productive in Go. It’s also easy to read and debug as there is only one way of doing anything so you know what is going on without having to ask the person who wrote the code. It’s the easiest language for beginners as well.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflection-on-golang/#tooling&quot;&gt;&lt;strong&gt;Built-in tooling and style guide&lt;/strong&gt;&lt;/a&gt;: Go provides built-in tooling for all the basic stuff like dependency management, testing, build and so on. It also has an opinionated formatter that saves a lot of time.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflection-on-golang/#goroutines--channels&quot;&gt;&lt;strong&gt;Goroutines&lt;/strong&gt;&lt;/a&gt;: Goroutines are awesome. It’s so easy to use and intuitive and the best concurrency experience you can find.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Native images&lt;/strong&gt;: It’s so easy to build native images with Go, no special setup required. It supports building for your favorite platform out of the box.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-dislikes-3&quot;&gt;😩 Dislikes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflection-on-golang/#simplicity-1&quot;&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;&lt;/a&gt;: Go’s simplicity is really nice when you are getting started but it starts to feel like an annoyance once you start writing more Go code. If you come from another language, you soon start to yearn for features like generics, error handling, default values, and so on. Keeping code DRY is a challenge in Go due to the lack of generics. IMO Go would be a great language if it had generics. Also, I dread writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if err != nil&lt;/code&gt; in Go.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boilerplate&lt;/strong&gt;: Side effect of Go being too simple. In large codebases, you would be repeating stuff like finding an item from an array or map so many times that the boilerplate is just too much after a while.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://deepu.tech/reflection-on-golang/#weird-interface-construct&quot;&gt;&lt;strong&gt;Implicit interfaces&lt;/strong&gt;&lt;/a&gt;: May it’s just me. I don’t like implicit interface implementations. It just feels wrong and confusing to me.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;These are my personal favorites among programming languages and doesn’t mean the likes and dislikes would apply to anyone. make your own conclusions but do use the language before making a judgment about it.&lt;/p&gt;

&lt;p&gt;In today’s IT landscape, being a polyglot developer is becoming a requirement. And personally, I believe that being a polyglot makes you a better programmer and software engineer. I previously wrote about &lt;a href=&quot;https://deepu.tech/how-to-be-an-effective-polyglot-developer/&quot;&gt;how to be an effective polyglot developer&lt;/a&gt;, do check it out if you are interested.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@tama66&quot;&gt;Peter Herrmann&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/old-computer&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</content:encoded>
        <media:content url="https://i.imgur.com/FOpUG38.jpeg" medium="image">https://i.imgur.com/FOpUG38.jpeg</media:content>
        <pubDate>Fri, 09 Jul 2021 00:00:00 +0200</pubDate>
        <link>https://deepu.tech/languages-i-like-and-why/</link>
        <guid isPermaLink="true">https://deepu.tech/languages-i-like-and-why/</guid>
        
        <category>java</category>
        
        <category>rust</category>
        
        <category>golang</category>
        
        <category>javascript</category>
        
        
      </item>
    
  </channel>
</rss>
